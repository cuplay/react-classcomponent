{"ast":null,"code":"/* redux库的主模块\r\n1.createStore(\r\n    2.comnbineReducers\r\n    3.applyMiddleware\r\n    4.getState\r\n    5.dispatch\r\n    6.subscribe\r\n) */\n\n/* 根据指定reducer创建对象 */\nexport function createStore(reducer) {\n  //初始值为调用reducer返回函数的结果（外部指定的默认值）\n  let state = reducer(undefined, {\n    type: '@@redux/init'\n  }); //用来存储监听state更新回调函数的数组容器\n\n  const listeners = [];\n  /* 返回内部的state数据 */\n\n  function getState() {\n    return state;\n  }\n  /* 1.分发action，出发reducer调用，产生新state \r\n  2.保存新的state\r\n  3.调用所有已存在的监听回调函数*/\n\n\n  function dispatch(action) {\n    //1\n    const newState = reducer(state, action); //2\n\n    state = newState; //3\n\n    listeners.forEach(listener => listener());\n  }\n  /*  \r\n  绑定内部state改变的监听回调\r\n  */\n\n\n  function subscribe(listener) {\n    //保存到缓存的listener容器中\n    listeners.push(listener);\n  }\n\n  return {\n    getState,\n    dispatch,\n    subscribe\n  };\n}\n/* 整合传入的包含多个reducer的对象 */\n\nexport function combineReducers(reducers) {\n  //执行reducers中每个reducer函数得到一个新的子状态，并封装一个对象\n  return (state = {}, action) => {\n    // const newState =Object.keys(reducers).reduce((preState,key)=>{\n    //     preState[key] = reducers[key](state[key],action)\n    //     return preState\n    // },{})\n    // return newState\n    const titalState = {};\n    Object.keys(reducers).forEach(key => {\n      totalState[key] = reducer[key](state[key], action);\n    });\n    return newState;\n  };\n}","map":{"version":3,"sources":["D:/desk/尚硅谷React全栈项目【谷粒后台】教程/React-admin/src/redux/自写redux/index.js"],"names":["createStore","reducer","state","undefined","type","listeners","getState","dispatch","action","newState","forEach","listener","subscribe","push","combineReducers","reducers","titalState","Object","keys","key","totalState"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,SAASA,WAAT,CAAqBC,OAArB,EAA8B;AACjC;AACA,MAAIC,KAAK,GAAGD,OAAO,CAACE,SAAD,EAAW;AAACC,IAAAA,IAAI,EAAC;AAAN,GAAX,CAAnB,CAFiC,CAGjC;;AACA,QAAMC,SAAS,GAAC,EAAhB;AACA;;AACA,WAASC,QAAT,GAAmB;AACf,WAAOJ,KAAP;AACH;AAED;AACJ;AACA;;;AACI,WAASK,QAAT,CAAkBC,MAAlB,EAAyB;AACrB;AACA,UAAMC,QAAQ,GAAGR,OAAO,CAACC,KAAD,EAAOM,MAAP,CAAxB,CAFqB,CAGrB;;AACAN,IAAAA,KAAK,GAAGO,QAAR,CAJqB,CAKrB;;AACAJ,IAAAA,SAAS,CAACK,OAAV,CAAkBC,QAAQ,IAAEA,QAAQ,EAApC;AACH;AAED;AACJ;AACA;;;AACI,WAASC,SAAT,CAAmBD,QAAnB,EAA4B;AACxB;AACAN,IAAAA,SAAS,CAACQ,IAAV,CAAeF,QAAf;AACH;;AAED,SAAO;AACHL,IAAAA,QADG;AAEHC,IAAAA,QAFG;AAGHK,IAAAA;AAHG,GAAP;AAKH;AAGD;;AACA,OAAO,SAASE,eAAT,CAAyBC,QAAzB,EAAkC;AACrC;AACA,SAAO,CAACb,KAAK,GAAC,EAAP,EAAUM,MAAV,KAAmB;AAClB;AACA;AACA;AACA;AACA;AACA,UAAMQ,UAAU,GAAC,EAAjB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBL,OAAtB,CAA8BS,GAAG,IAAE;AAC/BC,MAAAA,UAAU,CAACD,GAAD,CAAV,GAAgBlB,OAAO,CAACkB,GAAD,CAAP,CAAajB,KAAK,CAACiB,GAAD,CAAlB,EAAwBX,MAAxB,CAAhB;AACH,KAFD;AAGA,WAAOC,QAAP;AACP,GAXD;AAYH","sourcesContent":["/* redux库的主模块\r\n1.createStore(\r\n    2.comnbineReducers\r\n    3.applyMiddleware\r\n    4.getState\r\n    5.dispatch\r\n    6.subscribe\r\n) */\r\n\r\n/* 根据指定reducer创建对象 */\r\nexport function createStore(reducer) {\r\n    //初始值为调用reducer返回函数的结果（外部指定的默认值）\r\n    let state = reducer(undefined,{type:'@@redux/init'})\r\n    //用来存储监听state更新回调函数的数组容器\r\n    const listeners=[]\r\n    /* 返回内部的state数据 */\r\n    function getState(){\r\n        return state\r\n    }\r\n\r\n    /* 1.分发action，出发reducer调用，产生新state \r\n    2.保存新的state\r\n    3.调用所有已存在的监听回调函数*/\r\n    function dispatch(action){\r\n        //1\r\n        const newState = reducer(state,action)\r\n        //2\r\n        state = newState\r\n        //3\r\n        listeners.forEach(listener=>listener())\r\n    }\r\n\r\n    /*  \r\n    绑定内部state改变的监听回调\r\n    */\r\n    function subscribe(listener){\r\n        //保存到缓存的listener容器中\r\n        listeners.push(listener)\r\n    }\r\n\r\n    return {\r\n        getState,\r\n        dispatch,\r\n        subscribe\r\n    }\r\n}\r\n\r\n\r\n/* 整合传入的包含多个reducer的对象 */\r\nexport function combineReducers(reducers){\r\n    //执行reducers中每个reducer函数得到一个新的子状态，并封装一个对象\r\n    return (state={},action)=>{\r\n            // const newState =Object.keys(reducers).reduce((preState,key)=>{\r\n            //     preState[key] = reducers[key](state[key],action)\r\n            //     return preState\r\n            // },{})\r\n            // return newState\r\n            const titalState={}\r\n            Object.keys(reducers).forEach(key=>{\r\n                totalState[key]=reducer[key](state[key],action)\r\n            })\r\n            return newState\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}