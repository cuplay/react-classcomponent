{"ast":null,"code":"/* 用来根据老的state和指定的action生成并返回新的state函数 */\nimport storageUtils from \"../utils/storageUtils\";\nimport { combineReducers } from 'redux';\nimport { SET_HEAD_TITLE } from './action-type';\n/* 用来管理头部标题的reducer函数 */\n\nconst initTitle = '首页';\n\nfunction headTitle(state = initTitle, action) {\n  console.log(state);\n\n  switch (action.type) {\n    case SET_HEAD_TITLE:\n      return action.data;\n\n    default:\n      return state;\n  }\n}\n/* 管理用户名的reducer */\n\n\nconst initUser = storageUtils.getUser();\n\nfunction user(state = initUser, action) {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n/* \r\n向外默认暴露的是合并产生的总的reducer函数\r\n管理的总的state的结构 \r\n{\r\n    headTitle: '首页',\r\n    user:{}\r\n}*/\n\n\nconst reducers = combineReducers({\n  headTitle,\n  user\n});","map":{"version":3,"sources":["D:/desk/尚硅谷React全栈项目【谷粒后台】教程/React-admin/src/redux/reducer.js"],"names":["storageUtils","combineReducers","SET_HEAD_TITLE","initTitle","headTitle","state","action","console","log","type","data","initUser","getUser","user","reducers"],"mappings":"AAAA;AAEA,OAAOA,YAAP,MAAyB,uBAAzB;AACA,SAAQC,eAAR,QAA8B,OAA9B;AACA,SAAQC,cAAR,QAA6B,eAA7B;AACA;;AACA,MAAMC,SAAS,GAAC,IAAhB;;AACA,SAASC,SAAT,CAAmBC,KAAK,GAACF,SAAzB,EAAmCG,MAAnC,EAA0C;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,UAAOC,MAAM,CAACG,IAAd;AACI,SAAKP,cAAL;AACI,aAAOI,MAAM,CAACI,IAAd;;AACJ;AACI,aAAOL,KAAP;AAJR;AAMH;AAED;;;AACA,MAAMM,QAAQ,GAACX,YAAY,CAACY,OAAb,EAAf;;AACA,SAASC,IAAT,CAAcR,KAAK,GAACM,QAApB,EAA6BL,MAA7B,EAAoC;AAChC,UAAOA,MAAM,CAACG,IAAd;AACI;AACI,aAAOJ,KAAP;AAFR;AAIH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMS,QAAQ,GAAIb,eAAe,CAAC;AAC9BG,EAAAA,SAD8B;AAE9BS,EAAAA;AAF8B,CAAD,CAAjC","sourcesContent":["/* 用来根据老的state和指定的action生成并返回新的state函数 */\r\n\r\nimport storageUtils from \"../utils/storageUtils\"\r\nimport {combineReducers} from 'redux'\r\nimport {SET_HEAD_TITLE} from './action-type'\r\n/* 用来管理头部标题的reducer函数 */\r\nconst initTitle='首页'\r\nfunction headTitle(state=initTitle,action){\r\n    console.log(state)\r\n    switch(action.type){\r\n        case SET_HEAD_TITLE:\r\n            return action.data\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n/* 管理用户名的reducer */\r\nconst initUser=storageUtils.getUser()\r\nfunction user(state=initUser,action){\r\n    switch(action.type){\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n/* \r\n向外默认暴露的是合并产生的总的reducer函数\r\n管理的总的state的结构 \r\n{\r\n    headTitle: '首页',\r\n    user:{}\r\n}*/\r\nconst reducers =  combineReducers({\r\n    headTitle,\r\n    user\r\n})"]},"metadata":{},"sourceType":"module"}