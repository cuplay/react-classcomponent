{"ast":null,"code":"/* eslint-disable */\n//  json2.js\n//  2016-10-28\n//  Public Domain.\n//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n//  See http://www.JSON.org/js.html\n//  This code should be minified before deployment.\n//  See http://javascript.crockford.com/jsmin.html\n//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\n//  NOT CONTROL.\n//  This file creates a global JSON object containing two methods: stringify\n//  and parse. This file provides the ES5 JSON capability to ES3 systems.\n//  If a project might run on IE8 or earlier, then this file should be included.\n//  This file does nothing on ES5 systems.\n//      JSON.stringify(value, replacer, space)\n//          value       any JavaScript value, usually an object or array.\n//          replacer    an optional parameter that determines how object\n//                      values are stringified for objects. It can be a\n//                      function or an array of strings.\n//          space       an optional parameter that specifies the indentation\n//                      of nested structures. If it is omitted, the text will\n//                      be packed without extra whitespace. If it is a number,\n//                      it will specify the number of spaces to indent at each\n//                      level. If it is a string (such as \"\\t\" or \"&nbsp;\"),\n//                      it contains the characters used to indent at each level.\n//          This method produces a JSON text from a JavaScript value.\n//          When an object value is found, if the object contains a toJSON\n//          method, its toJSON method will be called and the result will be\n//          stringified. A toJSON method does not serialize: it returns the\n//          value represented by the name/value pair that should be serialized,\n//          or undefined if nothing should be serialized. The toJSON method\n//          will be passed the key associated with the value, and this will be\n//          bound to the value.\n//          For example, this would serialize Dates as ISO strings.\n//              Date.prototype.toJSON = function (key) {\n//                  function f(n) {\n//                      // Format integers to have at least two digits.\n//                      return (n < 10)\n//                          ? \"0\" + n\n//                          : n;\n//                  }\n//                  return this.getUTCFullYear()   + \"-\" +\n//                       f(this.getUTCMonth() + 1) + \"-\" +\n//                       f(this.getUTCDate())      + \"T\" +\n//                       f(this.getUTCHours())     + \":\" +\n//                       f(this.getUTCMinutes())   + \":\" +\n//                       f(this.getUTCSeconds())   + \"Z\";\n//              };\n//          You can provide an optional replacer method. It will be passed the\n//          key and value of each member, with this bound to the containing\n//          object. The value that is returned from your method will be\n//          serialized. If your method returns undefined, then the member will\n//          be excluded from the serialization.\n//          If the replacer parameter is an array of strings, then it will be\n//          used to select the members to be serialized. It filters the results\n//          such that only members with keys listed in the replacer array are\n//          stringified.\n//          Values that do not have JSON representations, such as undefined or\n//          functions, will not be serialized. Such values in objects will be\n//          dropped; in arrays they will be replaced with null. You can use\n//          a replacer function to replace those with JSON values.\n//          JSON.stringify(undefined) returns undefined.\n//          The optional space parameter produces a stringification of the\n//          value that is filled with line breaks and indentation to make it\n//          easier to read.\n//          If the space parameter is a non-empty string, then that string will\n//          be used for indentation. If the space parameter is a number, then\n//          the indentation will be that many spaces.\n//          Example:\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}]);\n//          // text is '[\"e\",{\"pluribus\":\"unum\"}]'\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}], null, \"\\t\");\n//          // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\n//          text = JSON.stringify([new Date()], function (key, value) {\n//              return this[key] instanceof Date\n//                  ? \"Date(\" + this[key] + \")\"\n//                  : value;\n//          });\n//          // text is '[\"Date(---current time---)\"]'\n//      JSON.parse(text, reviver)\n//          This method parses a JSON text to produce an object or array.\n//          It can throw a SyntaxError exception.\n//          The optional reviver parameter is a function that can filter and\n//          transform the results. It receives each of the keys and values,\n//          and its return value is used instead of the original value.\n//          If it returns what it received, then the structure is not modified.\n//          If it returns undefined then the member is deleted.\n//          Example:\n//          // Parse the text. Values that look like ISO date strings will\n//          // be converted to Date objects.\n//          myData = JSON.parse(text, function (key, value) {\n//              var a;\n//              if (typeof value === \"string\") {\n//                  a =\n//   /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n//                  if (a) {\n//                      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\n//                          +a[5], +a[6]));\n//                  }\n//              }\n//              return value;\n//          });\n//          myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n//              var d;\n//              if (typeof value === \"string\" &&\n//                      value.slice(0, 5) === \"Date(\" &&\n//                      value.slice(-1) === \")\") {\n//                  d = new Date(value.slice(5, -1));\n//                  if (d) {\n//                      return d;\n//                  }\n//              }\n//              return value;\n//          });\n//  This is a reference implementation. You are free to copy, modify, or\n//  redistribute.\n\n/*jslint\r\n    eval, for, this\r\n*/\n\n/*property\r\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\r\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\r\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\r\n    test, toJSON, toString, valueOf\r\n*/\n// Create a JSON object only if one does not already exist. We create the\n// methods in a closure to avoid creating global variables.\nif (typeof JSON !== \"object\") {\n  JSON = {};\n}\n\n(function () {\n  \"use strict\";\n\n  var rx_one = /^[\\],:{}\\s]*$/;\n  var rx_two = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\n  var rx_three = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n  var rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\n  var rx_escapable = /[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n  var rx_dangerous = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\n\n  function f(n) {\n    // Format integers to have at least two digits.\n    return n < 10 ? \"0\" + n : n;\n  }\n\n  function this_value() {\n    return this.valueOf();\n  }\n\n  if (typeof Date.prototype.toJSON !== \"function\") {\n    Date.prototype.toJSON = function () {\n      return isFinite(this.valueOf()) ? this.getUTCFullYear() + \"-\" + f(this.getUTCMonth() + 1) + \"-\" + f(this.getUTCDate()) + \"T\" + f(this.getUTCHours()) + \":\" + f(this.getUTCMinutes()) + \":\" + f(this.getUTCSeconds()) + \"Z\" : null;\n    };\n\n    Boolean.prototype.toJSON = this_value;\n    Number.prototype.toJSON = this_value;\n    String.prototype.toJSON = this_value;\n  }\n\n  var gap;\n  var indent;\n  var meta;\n  var rep;\n\n  function quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    rx_escapable.lastIndex = 0;\n    return rx_escapable.test(string) ? \"\\\"\" + string.replace(rx_escapable, function (a) {\n      var c = meta[a];\n      return typeof c === \"string\" ? c : \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + \"\\\"\" : \"\\\"\" + string + \"\\\"\";\n  }\n\n  function str(key, holder) {\n    // Produce a string from holder[key].\n    var i; // The loop counter.\n\n    var k; // The member key.\n\n    var v; // The member value.\n\n    var length;\n    var mind = gap;\n    var partial;\n    var value = holder[key]; // If the value has a toJSON method, call it to obtain a replacement value.\n\n    if (value && typeof value === \"object\" && typeof value.toJSON === \"function\") {\n      value = value.toJSON(key);\n    } // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n\n\n    if (typeof rep === \"function\") {\n      value = rep.call(holder, key, value);\n    } // What happens next depends on the value's type.\n\n\n    switch (typeof value) {\n      case \"string\":\n        return quote(value);\n\n      case \"number\":\n        // JSON numbers must be finite. Encode non-finite numbers as null.\n        return isFinite(value) ? String(value) : \"null\";\n\n      case \"boolean\":\n      case \"null\":\n        // If the value is a boolean or null, convert it to a string. Note:\n        // typeof null does not produce \"null\". The case is included here in\n        // the remote chance that this gets fixed someday.\n        return String(value);\n      // If the type is \"object\", we might be dealing with an object or an array or\n      // null.\n\n      case \"object\":\n        // Due to a specification blunder in ECMAScript, typeof null is \"object\",\n        // so watch out for that case.\n        if (!value) {\n          return \"null\";\n        } // Make an array to hold the partial results of stringifying this object value.\n\n\n        gap += indent;\n        partial = []; // Is the value an array?\n\n        if (Object.prototype.toString.apply(value) === \"[object Array]\") {\n          // The value is an array. Stringify every element. Use null as a placeholder\n          // for non-JSON values.\n          length = value.length;\n\n          for (i = 0; i < length; i += 1) {\n            partial[i] = str(i, value) || \"null\";\n          } // Join all of the elements together, separated with commas, and wrap them in\n          // brackets.\n\n\n          v = partial.length === 0 ? \"[]\" : gap ? \"[\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"]\" : \"[\" + partial.join(\",\") + \"]\";\n          gap = mind;\n          return v;\n        } // If the replacer is an array, use it to select the members to be stringified.\n\n\n        if (rep && typeof rep === \"object\") {\n          length = rep.length;\n\n          for (i = 0; i < length; i += 1) {\n            if (typeof rep[i] === \"string\") {\n              k = rep[i];\n              v = str(k, value);\n\n              if (v) {\n                partial.push(quote(k) + (gap ? \": \" : \":\") + v);\n              }\n            }\n          }\n        } else {\n          // Otherwise, iterate through all of the keys in the object.\n          for (k in value) {\n            if (Object.prototype.hasOwnProperty.call(value, k)) {\n              v = str(k, value);\n\n              if (v) {\n                partial.push(quote(k) + (gap ? \": \" : \":\") + v);\n              }\n            }\n          }\n        } // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n\n        v = partial.length === 0 ? \"{}\" : gap ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\" : \"{\" + partial.join(\",\") + \"}\";\n        gap = mind;\n        return v;\n    }\n  } // If the JSON object does not yet have a stringify method, give it one.\n\n\n  if (typeof JSON.stringify !== \"function\") {\n    meta = {\n      // table of character substitutions\n      \"\\b\": \"\\\\b\",\n      \"\\t\": \"\\\\t\",\n      \"\\n\": \"\\\\n\",\n      \"\\f\": \"\\\\f\",\n      \"\\r\": \"\\\\r\",\n      \"\\\"\": \"\\\\\\\"\",\n      \"\\\\\": \"\\\\\\\\\"\n    };\n\n    JSON.stringify = function (value, replacer, space) {\n      // The stringify method takes a value and an optional replacer, and an optional\n      // space parameter, and returns a JSON text. The replacer can be a function\n      // that can replace values, or an array of strings that will select the keys.\n      // A default replacer method can be provided. Use of the space parameter can\n      // produce text that is more easily readable.\n      var i;\n      gap = \"\";\n      indent = \"\"; // If the space parameter is a number, make an indent string containing that\n      // many spaces.\n\n      if (typeof space === \"number\") {\n        for (i = 0; i < space; i += 1) {\n          indent += \" \";\n        } // If the space parameter is a string, it will be used as the indent string.\n\n      } else if (typeof space === \"string\") {\n        indent = space;\n      } // If there is a replacer, it must be a function or an array.\n      // Otherwise, throw an error.\n\n\n      rep = replacer;\n\n      if (replacer && typeof replacer !== \"function\" && (typeof replacer !== \"object\" || typeof replacer.length !== \"number\")) {\n        throw new Error(\"JSON.stringify\");\n      } // Make a fake root object containing our value under the key of \"\".\n      // Return the result of stringifying the value.\n\n\n      return str(\"\", {\n        \"\": value\n      });\n    };\n  } // If the JSON object does not yet have a parse method, give it one.\n\n\n  if (typeof JSON.parse !== \"function\") {\n    JSON.parse = function (text, reviver) {\n      // The parse method takes a text and an optional reviver function, and returns\n      // a JavaScript value if the text is a valid JSON text.\n      var j;\n\n      function walk(holder, key) {\n        // The walk method is used to recursively walk the resulting structure so\n        // that modifications can be made.\n        var k;\n        var v;\n        var value = holder[key];\n\n        if (value && typeof value === \"object\") {\n          for (k in value) {\n            if (Object.prototype.hasOwnProperty.call(value, k)) {\n              v = walk(value, k);\n\n              if (v !== undefined) {\n                value[k] = v;\n              } else {\n                delete value[k];\n              }\n            }\n          }\n        }\n\n        return reviver.call(holder, key, value);\n      } // Parsing happens in four stages. In the first stage, we replace certain\n      // Unicode characters with escape sequences. JavaScript handles many characters\n      // incorrectly, either silently deleting them, or treating them as line endings.\n\n\n      text = String(text);\n      rx_dangerous.lastIndex = 0;\n\n      if (rx_dangerous.test(text)) {\n        text = text.replace(rx_dangerous, function (a) {\n          return \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n        });\n      } // In the second stage, we run the text against regular expressions that look\n      // for non-JSON patterns. We are especially concerned with \"()\" and \"new\"\n      // because they can cause invocation, and \"=\" because it can cause mutation.\n      // But just to be safe, we want to reject all unexpected forms.\n      // We split the second stage into 4 regexp operations in order to work around\n      // crippling inefficiencies in IE's and Safari's regexp engines. First we\n      // replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we\n      // replace all simple value tokens with \"]\" characters. Third, we delete all\n      // open brackets that follow a colon or comma or that begin the text. Finally,\n      // we look to see that the remaining characters are only whitespace or \"]\" or\n      // \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.\n\n\n      if (rx_one.test(text.replace(rx_two, \"@\").replace(rx_three, \"]\").replace(rx_four, \"\"))) {\n        // In the third stage we use the eval function to compile the text into a\n        // JavaScript structure. The \"{\" operator is subject to a syntactic ambiguity\n        // in JavaScript: it can begin a block or an object literal. We wrap the text\n        // in parens to eliminate the ambiguity.\n        j = eval(\"(\" + text + \")\"); // In the optional fourth stage, we recursively walk the new structure, passing\n        // each name/value pair to a reviver function for possible transformation.\n\n        return typeof reviver === \"function\" ? walk({\n          \"\": j\n        }, \"\") : j;\n      } // If the text is not JSON parseable, then a SyntaxError is thrown.\n\n\n      throw new SyntaxError(\"JSON.parse\");\n    };\n  }\n})();","map":{"version":3,"sources":["D:/桌面/前端实战/react_admin_client/node_modules/store/plugins/lib/json2.js"],"names":["JSON","rx_one","rx_two","rx_three","rx_four","rx_escapable","rx_dangerous","f","n","this_value","valueOf","Date","prototype","toJSON","isFinite","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","Boolean","Number","String","gap","indent","meta","rep","quote","string","lastIndex","test","replace","a","c","charCodeAt","toString","slice","str","key","holder","i","k","v","length","mind","partial","value","call","Object","apply","join","push","hasOwnProperty","stringify","replacer","space","Error","parse","text","reviver","j","walk","undefined","eval","SyntaxError"],"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","sourcesContent":["/* eslint-disable */\r\n\r\n//  json2.js\r\n//  2016-10-28\r\n//  Public Domain.\r\n//  NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\r\n//  See http://www.JSON.org/js.html\r\n//  This code should be minified before deployment.\r\n//  See http://javascript.crockford.com/jsmin.html\r\n\r\n//  USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO\r\n//  NOT CONTROL.\r\n\r\n//  This file creates a global JSON object containing two methods: stringify\r\n//  and parse. This file provides the ES5 JSON capability to ES3 systems.\r\n//  If a project might run on IE8 or earlier, then this file should be included.\r\n//  This file does nothing on ES5 systems.\r\n\r\n//      JSON.stringify(value, replacer, space)\r\n//          value       any JavaScript value, usually an object or array.\r\n//          replacer    an optional parameter that determines how object\r\n//                      values are stringified for objects. It can be a\r\n//                      function or an array of strings.\r\n//          space       an optional parameter that specifies the indentation\r\n//                      of nested structures. If it is omitted, the text will\r\n//                      be packed without extra whitespace. If it is a number,\r\n//                      it will specify the number of spaces to indent at each\r\n//                      level. If it is a string (such as \"\\t\" or \"&nbsp;\"),\r\n//                      it contains the characters used to indent at each level.\r\n//          This method produces a JSON text from a JavaScript value.\r\n//          When an object value is found, if the object contains a toJSON\r\n//          method, its toJSON method will be called and the result will be\r\n//          stringified. A toJSON method does not serialize: it returns the\r\n//          value represented by the name/value pair that should be serialized,\r\n//          or undefined if nothing should be serialized. The toJSON method\r\n//          will be passed the key associated with the value, and this will be\r\n//          bound to the value.\r\n\r\n//          For example, this would serialize Dates as ISO strings.\r\n\r\n//              Date.prototype.toJSON = function (key) {\r\n//                  function f(n) {\r\n//                      // Format integers to have at least two digits.\r\n//                      return (n < 10)\r\n//                          ? \"0\" + n\r\n//                          : n;\r\n//                  }\r\n//                  return this.getUTCFullYear()   + \"-\" +\r\n//                       f(this.getUTCMonth() + 1) + \"-\" +\r\n//                       f(this.getUTCDate())      + \"T\" +\r\n//                       f(this.getUTCHours())     + \":\" +\r\n//                       f(this.getUTCMinutes())   + \":\" +\r\n//                       f(this.getUTCSeconds())   + \"Z\";\r\n//              };\r\n\r\n//          You can provide an optional replacer method. It will be passed the\r\n//          key and value of each member, with this bound to the containing\r\n//          object. The value that is returned from your method will be\r\n//          serialized. If your method returns undefined, then the member will\r\n//          be excluded from the serialization.\r\n\r\n//          If the replacer parameter is an array of strings, then it will be\r\n//          used to select the members to be serialized. It filters the results\r\n//          such that only members with keys listed in the replacer array are\r\n//          stringified.\r\n\r\n//          Values that do not have JSON representations, such as undefined or\r\n//          functions, will not be serialized. Such values in objects will be\r\n//          dropped; in arrays they will be replaced with null. You can use\r\n//          a replacer function to replace those with JSON values.\r\n\r\n//          JSON.stringify(undefined) returns undefined.\r\n\r\n//          The optional space parameter produces a stringification of the\r\n//          value that is filled with line breaks and indentation to make it\r\n//          easier to read.\r\n\r\n//          If the space parameter is a non-empty string, then that string will\r\n//          be used for indentation. If the space parameter is a number, then\r\n//          the indentation will be that many spaces.\r\n\r\n//          Example:\r\n\r\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}]);\r\n//          // text is '[\"e\",{\"pluribus\":\"unum\"}]'\r\n\r\n//          text = JSON.stringify([\"e\", {pluribus: \"unum\"}], null, \"\\t\");\r\n//          // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'\r\n\r\n//          text = JSON.stringify([new Date()], function (key, value) {\r\n//              return this[key] instanceof Date\r\n//                  ? \"Date(\" + this[key] + \")\"\r\n//                  : value;\r\n//          });\r\n//          // text is '[\"Date(---current time---)\"]'\r\n\r\n//      JSON.parse(text, reviver)\r\n//          This method parses a JSON text to produce an object or array.\r\n//          It can throw a SyntaxError exception.\r\n\r\n//          The optional reviver parameter is a function that can filter and\r\n//          transform the results. It receives each of the keys and values,\r\n//          and its return value is used instead of the original value.\r\n//          If it returns what it received, then the structure is not modified.\r\n//          If it returns undefined then the member is deleted.\r\n\r\n//          Example:\r\n\r\n//          // Parse the text. Values that look like ISO date strings will\r\n//          // be converted to Date objects.\r\n\r\n//          myData = JSON.parse(text, function (key, value) {\r\n//              var a;\r\n//              if (typeof value === \"string\") {\r\n//                  a =\r\n//   /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\r\n//                  if (a) {\r\n//                      return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],\r\n//                          +a[5], +a[6]));\r\n//                  }\r\n//              }\r\n//              return value;\r\n//          });\r\n\r\n//          myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\r\n//              var d;\r\n//              if (typeof value === \"string\" &&\r\n//                      value.slice(0, 5) === \"Date(\" &&\r\n//                      value.slice(-1) === \")\") {\r\n//                  d = new Date(value.slice(5, -1));\r\n//                  if (d) {\r\n//                      return d;\r\n//                  }\r\n//              }\r\n//              return value;\r\n//          });\r\n\r\n//  This is a reference implementation. You are free to copy, modify, or\r\n//  redistribute.\r\n\r\n/*jslint\r\n    eval, for, this\r\n*/\r\n\r\n/*property\r\n    JSON, apply, call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,\r\n    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,\r\n    lastIndex, length, parse, prototype, push, replace, slice, stringify,\r\n    test, toJSON, toString, valueOf\r\n*/\r\n\r\n\r\n// Create a JSON object only if one does not already exist. We create the\r\n// methods in a closure to avoid creating global variables.\r\n\r\nif (typeof JSON !== \"object\") {\r\n    JSON = {};\r\n}\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    var rx_one = /^[\\],:{}\\s]*$/;\r\n    var rx_two = /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;\r\n    var rx_three = /\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\r\n    var rx_four = /(?:^|:|,)(?:\\s*\\[)+/g;\r\n    var rx_escapable = /[\\\\\"\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\r\n    var rx_dangerous = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\r\n\r\n    function f(n) {\r\n        // Format integers to have at least two digits.\r\n        return n < 10\r\n            ? \"0\" + n\r\n            : n;\r\n    }\r\n\r\n    function this_value() {\r\n        return this.valueOf();\r\n    }\r\n\r\n    if (typeof Date.prototype.toJSON !== \"function\") {\r\n\r\n        Date.prototype.toJSON = function () {\r\n\r\n            return isFinite(this.valueOf())\r\n                ? this.getUTCFullYear() + \"-\" +\r\n                        f(this.getUTCMonth() + 1) + \"-\" +\r\n                        f(this.getUTCDate()) + \"T\" +\r\n                        f(this.getUTCHours()) + \":\" +\r\n                        f(this.getUTCMinutes()) + \":\" +\r\n                        f(this.getUTCSeconds()) + \"Z\"\r\n                : null;\r\n        };\r\n\r\n        Boolean.prototype.toJSON = this_value;\r\n        Number.prototype.toJSON = this_value;\r\n        String.prototype.toJSON = this_value;\r\n    }\r\n\r\n    var gap;\r\n    var indent;\r\n    var meta;\r\n    var rep;\r\n\r\n\r\n    function quote(string) {\r\n\r\n// If the string contains no control characters, no quote characters, and no\r\n// backslash characters, then we can safely slap some quotes around it.\r\n// Otherwise we must also replace the offending characters with safe escape\r\n// sequences.\r\n\r\n        rx_escapable.lastIndex = 0;\r\n        return rx_escapable.test(string)\r\n            ? \"\\\"\" + string.replace(rx_escapable, function (a) {\r\n                var c = meta[a];\r\n                return typeof c === \"string\"\r\n                    ? c\r\n                    : \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\r\n            }) + \"\\\"\"\r\n            : \"\\\"\" + string + \"\\\"\";\r\n    }\r\n\r\n\r\n    function str(key, holder) {\r\n\r\n// Produce a string from holder[key].\r\n\r\n        var i;          // The loop counter.\r\n        var k;          // The member key.\r\n        var v;          // The member value.\r\n        var length;\r\n        var mind = gap;\r\n        var partial;\r\n        var value = holder[key];\r\n\r\n// If the value has a toJSON method, call it to obtain a replacement value.\r\n\r\n        if (value && typeof value === \"object\" &&\r\n                typeof value.toJSON === \"function\") {\r\n            value = value.toJSON(key);\r\n        }\r\n\r\n// If we were called with a replacer function, then call the replacer to\r\n// obtain a replacement value.\r\n\r\n        if (typeof rep === \"function\") {\r\n            value = rep.call(holder, key, value);\r\n        }\r\n\r\n// What happens next depends on the value's type.\r\n\r\n        switch (typeof value) {\r\n        case \"string\":\r\n            return quote(value);\r\n\r\n        case \"number\":\r\n\r\n// JSON numbers must be finite. Encode non-finite numbers as null.\r\n\r\n            return isFinite(value)\r\n                ? String(value)\r\n                : \"null\";\r\n\r\n        case \"boolean\":\r\n        case \"null\":\r\n\r\n// If the value is a boolean or null, convert it to a string. Note:\r\n// typeof null does not produce \"null\". The case is included here in\r\n// the remote chance that this gets fixed someday.\r\n\r\n            return String(value);\r\n\r\n// If the type is \"object\", we might be dealing with an object or an array or\r\n// null.\r\n\r\n        case \"object\":\r\n\r\n// Due to a specification blunder in ECMAScript, typeof null is \"object\",\r\n// so watch out for that case.\r\n\r\n            if (!value) {\r\n                return \"null\";\r\n            }\r\n\r\n// Make an array to hold the partial results of stringifying this object value.\r\n\r\n            gap += indent;\r\n            partial = [];\r\n\r\n// Is the value an array?\r\n\r\n            if (Object.prototype.toString.apply(value) === \"[object Array]\") {\r\n\r\n// The value is an array. Stringify every element. Use null as a placeholder\r\n// for non-JSON values.\r\n\r\n                length = value.length;\r\n                for (i = 0; i < length; i += 1) {\r\n                    partial[i] = str(i, value) || \"null\";\r\n                }\r\n\r\n// Join all of the elements together, separated with commas, and wrap them in\r\n// brackets.\r\n\r\n                v = partial.length === 0\r\n                    ? \"[]\"\r\n                    : gap\r\n                        ? \"[\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"]\"\r\n                        : \"[\" + partial.join(\",\") + \"]\";\r\n                gap = mind;\r\n                return v;\r\n            }\r\n\r\n// If the replacer is an array, use it to select the members to be stringified.\r\n\r\n            if (rep && typeof rep === \"object\") {\r\n                length = rep.length;\r\n                for (i = 0; i < length; i += 1) {\r\n                    if (typeof rep[i] === \"string\") {\r\n                        k = rep[i];\r\n                        v = str(k, value);\r\n                        if (v) {\r\n                            partial.push(quote(k) + (\r\n                                gap\r\n                                    ? \": \"\r\n                                    : \":\"\r\n                            ) + v);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n\r\n// Otherwise, iterate through all of the keys in the object.\r\n\r\n                for (k in value) {\r\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\r\n                        v = str(k, value);\r\n                        if (v) {\r\n                            partial.push(quote(k) + (\r\n                                gap\r\n                                    ? \": \"\r\n                                    : \":\"\r\n                            ) + v);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n// Join all of the member texts together, separated with commas,\r\n// and wrap them in braces.\r\n\r\n            v = partial.length === 0\r\n                ? \"{}\"\r\n                : gap\r\n                    ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\"\r\n                    : \"{\" + partial.join(\",\") + \"}\";\r\n            gap = mind;\r\n            return v;\r\n        }\r\n    }\r\n\r\n// If the JSON object does not yet have a stringify method, give it one.\r\n\r\n    if (typeof JSON.stringify !== \"function\") {\r\n        meta = {    // table of character substitutions\r\n            \"\\b\": \"\\\\b\",\r\n            \"\\t\": \"\\\\t\",\r\n            \"\\n\": \"\\\\n\",\r\n            \"\\f\": \"\\\\f\",\r\n            \"\\r\": \"\\\\r\",\r\n            \"\\\"\": \"\\\\\\\"\",\r\n            \"\\\\\": \"\\\\\\\\\"\r\n        };\r\n        JSON.stringify = function (value, replacer, space) {\r\n\r\n// The stringify method takes a value and an optional replacer, and an optional\r\n// space parameter, and returns a JSON text. The replacer can be a function\r\n// that can replace values, or an array of strings that will select the keys.\r\n// A default replacer method can be provided. Use of the space parameter can\r\n// produce text that is more easily readable.\r\n\r\n            var i;\r\n            gap = \"\";\r\n            indent = \"\";\r\n\r\n// If the space parameter is a number, make an indent string containing that\r\n// many spaces.\r\n\r\n            if (typeof space === \"number\") {\r\n                for (i = 0; i < space; i += 1) {\r\n                    indent += \" \";\r\n                }\r\n\r\n// If the space parameter is a string, it will be used as the indent string.\r\n\r\n            } else if (typeof space === \"string\") {\r\n                indent = space;\r\n            }\r\n\r\n// If there is a replacer, it must be a function or an array.\r\n// Otherwise, throw an error.\r\n\r\n            rep = replacer;\r\n            if (replacer && typeof replacer !== \"function\" &&\r\n                    (typeof replacer !== \"object\" ||\r\n                    typeof replacer.length !== \"number\")) {\r\n                throw new Error(\"JSON.stringify\");\r\n            }\r\n\r\n// Make a fake root object containing our value under the key of \"\".\r\n// Return the result of stringifying the value.\r\n\r\n            return str(\"\", {\"\": value});\r\n        };\r\n    }\r\n\r\n\r\n// If the JSON object does not yet have a parse method, give it one.\r\n\r\n    if (typeof JSON.parse !== \"function\") {\r\n        JSON.parse = function (text, reviver) {\r\n\r\n// The parse method takes a text and an optional reviver function, and returns\r\n// a JavaScript value if the text is a valid JSON text.\r\n\r\n            var j;\r\n\r\n            function walk(holder, key) {\r\n\r\n// The walk method is used to recursively walk the resulting structure so\r\n// that modifications can be made.\r\n\r\n                var k;\r\n                var v;\r\n                var value = holder[key];\r\n                if (value && typeof value === \"object\") {\r\n                    for (k in value) {\r\n                        if (Object.prototype.hasOwnProperty.call(value, k)) {\r\n                            v = walk(value, k);\r\n                            if (v !== undefined) {\r\n                                value[k] = v;\r\n                            } else {\r\n                                delete value[k];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return reviver.call(holder, key, value);\r\n            }\r\n\r\n\r\n// Parsing happens in four stages. In the first stage, we replace certain\r\n// Unicode characters with escape sequences. JavaScript handles many characters\r\n// incorrectly, either silently deleting them, or treating them as line endings.\r\n\r\n            text = String(text);\r\n            rx_dangerous.lastIndex = 0;\r\n            if (rx_dangerous.test(text)) {\r\n                text = text.replace(rx_dangerous, function (a) {\r\n                    return \"\\\\u\" +\r\n                            (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\r\n                });\r\n            }\r\n\r\n// In the second stage, we run the text against regular expressions that look\r\n// for non-JSON patterns. We are especially concerned with \"()\" and \"new\"\r\n// because they can cause invocation, and \"=\" because it can cause mutation.\r\n// But just to be safe, we want to reject all unexpected forms.\r\n\r\n// We split the second stage into 4 regexp operations in order to work around\r\n// crippling inefficiencies in IE's and Safari's regexp engines. First we\r\n// replace the JSON backslash pairs with \"@\" (a non-JSON character). Second, we\r\n// replace all simple value tokens with \"]\" characters. Third, we delete all\r\n// open brackets that follow a colon or comma or that begin the text. Finally,\r\n// we look to see that the remaining characters are only whitespace or \"]\" or\r\n// \",\" or \":\" or \"{\" or \"}\". If that is so, then the text is safe for eval.\r\n\r\n            if (\r\n                rx_one.test(\r\n                    text\r\n                        .replace(rx_two, \"@\")\r\n                        .replace(rx_three, \"]\")\r\n                        .replace(rx_four, \"\")\r\n                )\r\n            ) {\r\n\r\n// In the third stage we use the eval function to compile the text into a\r\n// JavaScript structure. The \"{\" operator is subject to a syntactic ambiguity\r\n// in JavaScript: it can begin a block or an object literal. We wrap the text\r\n// in parens to eliminate the ambiguity.\r\n\r\n                j = eval(\"(\" + text + \")\");\r\n\r\n// In the optional fourth stage, we recursively walk the new structure, passing\r\n// each name/value pair to a reviver function for possible transformation.\r\n\r\n                return (typeof reviver === \"function\")\r\n                    ? walk({\"\": j}, \"\")\r\n                    : j;\r\n            }\r\n\r\n// If the text is not JSON parseable, then a SyntaxError is thrown.\r\n\r\n            throw new SyntaxError(\"JSON.parse\");\r\n        };\r\n    }\r\n}());"]},"metadata":{},"sourceType":"script"}