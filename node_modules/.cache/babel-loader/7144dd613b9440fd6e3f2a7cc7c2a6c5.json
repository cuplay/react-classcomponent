{"ast":null,"code":"/* 包含n个action creator函数的模块\r\n同步action:对象{type:xxx,date:数据} \r\n异步action:函数 dispatch=>{}*/\nimport { SET_HEAD_TITLE, RECEIVE_USER, SHOW_ERROR_MSG, RESET_USER } from \"./action-type\";\nimport { reqLogin } from \"../api\";\nimport storageUtils from \"../utils/storageUtils\";\n/* 设置头部标题的同步action */\n\nexport const setHeadTitle = headTitle => ({\n  type: SET_HEAD_TITLE,\n  data: headTitle\n});\nexport const receiveUser = user => ({\n  type: RECEIVE_USER,\n  user\n});\nexport const showErrorMsg = errorMsg => ({\n  type: SHOW_ERROR_MSG,\n  errorMsg\n});\nexport const logout = () => {\n  storageUtils.deleteUser();\n  return {\n    type: RESET_USER\n  };\n};\n/* 退出登陆的同步action */\n\n/*  \r\n登陆的异步 action\r\n*/\n\nexport const login = (username, password) => async dispatch => {\n  //执行异步请求\n  const result = await reqLogin(username, password); //如果成功，分发成功的同步action\n\n  if (result.status === 0) {\n    const user = result.data; // memoryUtils.user = user;\n\n    storageUtils.saveUser(user);\n    dispatch(receiveUser(user)); //登陆成功\n  } else {\n    //如果失败，分发成功的同步action\n    const msg = result.msg;\n    dispatch(showErrorMsg(msg));\n  }\n};","map":{"version":3,"sources":["D:/desk/尚硅谷React全栈项目【谷粒后台】教程/React-admin/src/redux/actions.js"],"names":["SET_HEAD_TITLE","RECEIVE_USER","SHOW_ERROR_MSG","RESET_USER","reqLogin","storageUtils","setHeadTitle","headTitle","type","data","receiveUser","user","showErrorMsg","errorMsg","logout","deleteUser","login","username","password","dispatch","result","status","saveUser","msg"],"mappings":"AAAA;AACA;AACA;AACA,SACEA,cADF,EAEEC,YAFF,EAGEC,cAHF,EAIEC,UAJF,QAKO,eALP;AAMA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,SAAD,KAAgB;AAC1CC,EAAAA,IAAI,EAAER,cADoC;AAE1CS,EAAAA,IAAI,EAAEF;AAFoC,CAAhB,CAArB;AAKP,OAAO,MAAMG,WAAW,GAAIC,IAAD,KAAW;AAAEH,EAAAA,IAAI,EAAEP,YAAR;AAAsBU,EAAAA;AAAtB,CAAX,CAApB;AAEP,OAAO,MAAMC,YAAY,GAAIC,QAAD,KAAe;AAAEL,EAAAA,IAAI,EAAEN,cAAR;AAAwBW,EAAAA;AAAxB,CAAf,CAArB;AAEP,OAAO,MAAMC,MAAM,GAAG,MAAM;AAC1BT,EAAAA,YAAY,CAACU,UAAb;AACA,SAAO;AAAEP,IAAAA,IAAI,EAAEL;AAAR,GAAP;AACD,CAHM;AAKP;;AAEA;AACA;AACA;;AACA,OAAO,MAAMa,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB,MAAOC,QAAP,IAAoB;AAC/D;AACA,QAAMC,MAAM,GAAG,MAAMhB,QAAQ,CAACa,QAAD,EAAWC,QAAX,CAA7B,CAF+D,CAG/D;;AACA,MAAIE,MAAM,CAACC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,UAAMV,IAAI,GAAGS,MAAM,CAACX,IAApB,CADuB,CAEvB;;AACAJ,IAAAA,YAAY,CAACiB,QAAb,CAAsBX,IAAtB;AACAQ,IAAAA,QAAQ,CAACT,WAAW,CAACC,IAAD,CAAZ,CAAR,CAJuB,CAKvB;AACD,GAND,MAMO;AACL;AACA,UAAMY,GAAG,GAAGH,MAAM,CAACG,GAAnB;AACAJ,IAAAA,QAAQ,CAACP,YAAY,CAACW,GAAD,CAAb,CAAR;AACD;AACF,CAfM","sourcesContent":["/* 包含n个action creator函数的模块\r\n同步action:对象{type:xxx,date:数据} \r\n异步action:函数 dispatch=>{}*/\r\nimport {\r\n  SET_HEAD_TITLE,\r\n  RECEIVE_USER,\r\n  SHOW_ERROR_MSG,\r\n  RESET_USER,\r\n} from \"./action-type\";\r\nimport { reqLogin } from \"../api\";\r\nimport storageUtils from \"../utils/storageUtils\";\r\n/* 设置头部标题的同步action */\r\nexport const setHeadTitle = (headTitle) => ({\r\n  type: SET_HEAD_TITLE,\r\n  data: headTitle,\r\n});\r\n\r\nexport const receiveUser = (user) => ({ type: RECEIVE_USER, user });\r\n\r\nexport const showErrorMsg = (errorMsg) => ({ type: SHOW_ERROR_MSG, errorMsg });\r\n\r\nexport const logout = () => {\r\n  storageUtils.deleteUser();\r\n  return { type: RESET_USER };\r\n};\r\n\r\n/* 退出登陆的同步action */\r\n\r\n/*  \r\n登陆的异步 action\r\n*/\r\nexport const login = (username, password) => async (dispatch) => {\r\n  //执行异步请求\r\n  const result = await reqLogin(username, password);\r\n  //如果成功，分发成功的同步action\r\n  if (result.status === 0) {\r\n    const user = result.data;\r\n    // memoryUtils.user = user;\r\n    storageUtils.saveUser(user);\r\n    dispatch(receiveUser(user));\r\n    //登陆成功\r\n  } else {\r\n    //如果失败，分发成功的同步action\r\n    const msg = result.msg;\r\n    dispatch(showErrorMsg(msg));\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}