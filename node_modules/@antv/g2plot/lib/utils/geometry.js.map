{"version":3,"file":"geometry.js","sourceRoot":"","sources":["../../src/utils/geometry.ts"],"names":[],"mappings":";;;AACA,mCAAoC;AAEpC;;;;GAIG;AACH,SAAgB,YAAY,CAAC,KAAW,EAAE,IAAY;IACpD,OAAO,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,CAAW,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,IAAI,EAAf,CAAe,CAAC,CAAC;AACjE,CAAC;AAFD,oCAEC;AAED;;GAEG;AACH,SAAgB,cAAc,CAAC,KAAY;IACzC,OAAO,aAAM,CACX,KAAK,CAAC,UAAU,EAChB,UAAC,CAAY,EAAE,QAAkB;QAC/B,OAAO,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC,EACD,EAAE,CACH,CAAC;AACJ,CAAC;AARD,wCAQC","sourcesContent":["import { Chart, Geometry, View, Element } from '@antv/g2';\nimport { reduce } from '@antv/util';\n\n/**\n * 在 Chart 中查找第一个指定 type 类型的 geometry\n * @param chart\n * @param type\n */\nexport function findGeometry(chart: View, type: string): Geometry {\n  return chart.geometries.find((g: Geometry) => g.type === type);\n}\n\n/**\n * 获取 Chart 的 所有 elements\n */\nexport function getAllElements(chart: Chart): Element[] {\n  return reduce(\n    chart.geometries,\n    (r: Element[], geometry: Geometry) => {\n      return r.concat(geometry.elements);\n    },\n    []\n  );\n}\n"]}