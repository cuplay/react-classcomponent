"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sankeyLayout = exports.getDefaultOptions = exports.getNodeAlignFunction = void 0;
var util_1 = require("@antv/util");
var d3_sankey_1 = require("d3-sankey");
var ALIGN_METHOD = {
    left: d3_sankey_1.sankeyLeft,
    right: d3_sankey_1.sankeyRight,
    center: d3_sankey_1.sankeyCenter,
    justify: d3_sankey_1.sankeyJustify,
};
/**
 * 默认值
 */
var DEFAULT_OPTIONS = {
    nodeId: function (node) { return node.index; },
    nodeAlign: 'justify',
    nodeWidth: 0.008,
    nodePadding: 0.03,
    nodeSort: undefined,
};
/**
 * 获得 align function
 * @param nodeAlign
 */
function getNodeAlignFunction(nodeAlign) {
    var func = util_1.isString(nodeAlign) ? ALIGN_METHOD[nodeAlign] : util_1.isFunction(nodeAlign) ? nodeAlign : null;
    return func || d3_sankey_1.sankeyJustify;
}
exports.getNodeAlignFunction = getNodeAlignFunction;
function getDefaultOptions(sankeyLayoutOptions) {
    return util_1.assign({}, DEFAULT_OPTIONS, sankeyLayoutOptions);
}
exports.getDefaultOptions = getDefaultOptions;
/**
 * 桑基图利用数据进行布局的函数，最终返回节点、边的位置（0 - 1 的信息）
 * 将会修改 data 数据
 * @param sankeyLayoutOptions
 * @param data
 */
function sankeyLayout(sankeyLayoutOptions, data) {
    var options = getDefaultOptions(sankeyLayoutOptions);
    var nodeId = options.nodeId, nodeSort = options.nodeSort, nodeAlign = options.nodeAlign, nodeWidth = options.nodeWidth, nodePadding = options.nodePadding;
    var sankeyProcessor = d3_sankey_1.sankey()
        .nodeSort(nodeSort)
        .links(function (d) { return d.links; })
        .nodeWidth(nodeWidth)
        .nodePadding(nodePadding)
        .nodeAlign(getNodeAlignFunction(nodeAlign))
        .extent([
        [0, 0],
        [1, 1],
    ])
        .nodeId(nodeId);
    // 进行桑基图布局处理
    var layoutData = sankeyProcessor(data);
    // post process (x, y), etc.
    layoutData.nodes.forEach(function (node) {
        var x0 = node.x0, x1 = node.x1, y0 = node.y0, y1 = node.y1;
        /* points
         * 3---2
         * |   |
         * 0---1
         */
        node.x = [x0, x1, x1, x0];
        node.y = [y0, y0, y1, y1];
    });
    layoutData.links.forEach(function (edge) {
        var source = edge.source, target = edge.target;
        var sx = source.x1;
        var tx = target.x0;
        edge.x = [sx, sx, tx, tx];
        var offset = edge.width / 2;
        edge.y = [edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset];
    });
    return layoutData;
}
exports.sankeyLayout = sankeyLayout;
//# sourceMappingURL=sankey.js.map