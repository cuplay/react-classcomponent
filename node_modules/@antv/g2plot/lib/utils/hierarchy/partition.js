"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.partition = void 0;
var tslib_1 = require("tslib");
var d3Hierarchy = tslib_1.__importStar(require("d3-hierarchy"));
var util_1 = require("@antv/util");
var util_2 = require("./util");
var DEFAULT_OPTIONS = {
    field: 'value',
    size: [1, 1],
    round: false,
    padding: 0,
    sort: true,
    as: ['x', 'y'],
};
function partition(data, options) {
    options = util_1.assign({}, DEFAULT_OPTIONS, options);
    var as = options.as;
    if (!util_1.isArray(as) || as.length !== 2) {
        throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ "x", "y" ])!');
    }
    var field;
    try {
        field = util_2.getField(options);
    }
    catch (e) {
        console.warn(e);
    }
    var partition = function (data) {
        return d3Hierarchy.partition().size(options.size).round(options.round).padding(options.padding)(d3Hierarchy.hierarchy(data).sum(function (d) { return d[field]; }));
    };
    var root = partition(data);
    /*
     * points:
     *   3  2
     *   0  1
     */
    var x = as[0];
    var y = as[1];
    root.each(function (node) {
        node[x] = [node.x0, node.x1, node.x1, node.x0];
        node[y] = [node.y1, node.y1, node.y0, node.y0];
        ['x0', 'x1', 'y0', 'y1'].forEach(function (prop) {
            if (as.indexOf(prop) === -1) {
                delete node[prop];
            }
        });
    });
    return util_2.getAllNodes(root);
}
exports.partition = partition;
//# sourceMappingURL=partition.js.map