{"version":3,"file":"adaptor.js","sourceRoot":"","sources":["../../../src/plots/treemap/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { polygon as basePolygon } from '../../adaptor/geometries/polygon';\nimport { Params } from '../../core/adaptor';\nimport { interaction as commonInteraction, animation, theme, legend, annotation, tooltip } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { transformData, isDrillDown, getFommatInteractions } from './utils';\nimport { TreemapOptions } from './types';\n\n/**\n * 获取默认 option\n * @param params\n */\nfunction defaultOptions(params: Params<TreemapOptions>): Params<TreemapOptions> {\n  const { options } = params;\n  const { colorField } = options;\n\n  return deepAssign(\n    {\n      options: {\n        // 默认按照 name 字段对颜色进行分类\n        colorField: 'name',\n        rectStyle: {\n          lineWidth: 1,\n          stroke: '#fff',\n        },\n        hierarchyConfig: {\n          tile: 'treemapResquarify',\n        },\n        label: {\n          fields: ['name'],\n          layout: {\n            type: 'limit-in-shape',\n          },\n        },\n        tooltip: {\n          showMarkers: false,\n          showTitle: false,\n          fields: ['name', 'value', colorField],\n          formatter: (data) => {\n            return {\n              name: data.name,\n              value: data.value,\n            };\n          },\n        },\n        interactions: [{ type: 'view-zoom' }, { type: 'treemap-element-zoom' }],\n        // interactions: [{ type: 'drag-move' }],\n      },\n    },\n    params\n  );\n}\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TreemapOptions>): Params<TreemapOptions> {\n  const { chart, options } = params;\n  const { color, colorField, rectStyle } = options;\n  const data = transformData({\n    data: options.data,\n    colorField: options.colorField,\n    openDrillDown: isDrillDown(options.interactions),\n  });\n\n  chart.data(data);\n\n  // geometry\n  basePolygon(\n    deepAssign({}, params, {\n      options: {\n        xField: 'x',\n        yField: 'y',\n        seriesField: colorField,\n        rawFields: ['value'],\n        polygon: {\n          color,\n          style: rectStyle,\n        },\n      },\n    })\n  );\n\n  // 做一个反转，这样配合排序，可以将最大值放到左上角，最小值放到右下角\n  chart.coordinate().reflect('y');\n\n  return params;\n}\n\n/**\n * 坐标轴\n * @param params\n */\nfunction axis(params: Params<TreemapOptions>): Params<TreemapOptions> {\n  const { chart } = params;\n  chart.axis(false);\n  return params;\n}\n\n/**\n * Interaction 配置\n * @param params\n */\nexport function interaction(params: Params<TreemapOptions>): Params<TreemapOptions> {\n  const { chart, options } = params;\n  const { interactions, hierarchyConfig } = options;\n\n  commonInteraction({\n    chart,\n    options: {\n      interactions: getFommatInteractions(interactions, hierarchyConfig),\n    },\n  });\n\n  return params;\n}\n\n/**\n * 矩形树图\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TreemapOptions>) {\n  return flow(defaultOptions, geometry, axis, theme, legend, tooltip, interaction, animation, annotation())(params);\n}\n"]}