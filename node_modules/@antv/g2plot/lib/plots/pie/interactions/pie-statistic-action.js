"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatisticAction = void 0;
var tslib_1 = require("tslib");
var g2_1 = require("@antv/g2");
var util_1 = require("@antv/util");
var statistic_1 = require("../../../utils/statistic");
/**
 * Pie 中心文本事件的 Action
 */
var StatisticAction = /** @class */ (function (_super) {
    tslib_1.__extends(StatisticAction, _super);
    function StatisticAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StatisticAction.prototype.getAnnotations = function (_view) {
        var view = _view || this.context.view;
        // @ts-ignore
        return view.getController('annotation').option;
    };
    StatisticAction.prototype.getInitialAnnotation = function () {
        return this.initialAnnotation;
    };
    StatisticAction.prototype.init = function () {
        var _this = this;
        var view = this.context.view;
        view.removeInteraction('tooltip');
        view.on('afterchangesize', function () {
            var annotations = _this.getAnnotations(view);
            _this.initialAnnotation = annotations;
        });
    };
    StatisticAction.prototype.change = function () {
        var _a = this.context, view = _a.view, event = _a.event;
        var annotations = this.getAnnotations();
        if (!this.initialAnnotation) {
            this.initialAnnotation = annotations;
        }
        var data = ((event === null || event === void 0 ? void 0 : event.data) || {}).data;
        if (event.type.match('legend-item')) {
            var delegateObject = g2_1.Util.getDelegationObject(this.context);
            // @ts-ignore
            var colorField_1 = view.getGroupedFields()[0];
            if (delegateObject && colorField_1) {
                var item_1 = delegateObject.item;
                data = view.getData().find(function (d) { return d[colorField_1] === item_1.value; });
            }
        }
        if (data) {
            var annotationController_1 = view.getController('annotation');
            annotationController_1.clear(true);
            // @ts-ignore
            var _b = view.getScaleFields(), angleField_1 = _b[1], colorField_2 = _b[2];
            var angleScale_1 = view.getScaleByField(angleField_1);
            var colorScale_1 = view.getScaleByField(colorField_2);
            var annotationOptions_1 = annotations.filter(function (a) { return !util_1.get(a, 'key', '').match('statistic'); });
            var statisticOptions = annotations.filter(function (a) { return util_1.get(a, 'key', '').match('statistic'); });
            var titleOpt_1 = statisticOptions.filter(function (opt) { return opt.key === 'top-statistic'; });
            var contentOpt_1 = statisticOptions.filter(function (opt) { return opt.key === 'bottom-statistic'; });
            util_1.each(statisticOptions, function (option) {
                var text;
                var transform;
                if (option.key === 'top-statistic') {
                    text = colorScale_1 ? colorScale_1.getText(data[colorField_2]) : null;
                    transform = contentOpt_1 ? 'translate(-50%, -100%)' : 'translate(-50%, -50%)';
                }
                else {
                    text = angleScale_1 ? angleScale_1.getText(data[angleField_1]) : data[angleField_1];
                    transform = titleOpt_1 ? 'translate(-50%, 0)' : 'translate(-50%,-50%)';
                }
                annotationOptions_1.push(tslib_1.__assign(tslib_1.__assign({}, option), { html: function (container, view) {
                        var coordinate = view.getCoordinate();
                        var containerWidth = coordinate.getRadius() * coordinate.innerRadius * 2;
                        var style = util_1.isFunction(option.style) ? option.style() : option.style;
                        statistic_1.setStatisticContainerStyle(container, tslib_1.__assign({ width: containerWidth + "px", transform: transform }, statistic_1.adapteStyle(style)));
                        var filteredData = view.getData();
                        if (option.customHtml) {
                            return option.customHtml(container, view, data, filteredData);
                        }
                        if (option.formatter) {
                            text = option.formatter(data, filteredData);
                        }
                        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number
                        return text ? (util_1.isString(text) ? text : "" + text) : '<div></div>';
                    } }));
                annotationOptions_1.forEach(function (opt) {
                    // @ts-ignore
                    annotationController_1.annotation(opt);
                });
                view.render(true);
            });
        }
    };
    StatisticAction.prototype.reset = function () {
        var view = this.context.view;
        var annotationController = view.getController('annotation');
        annotationController.clear(true);
        var initialStatistic = this.getInitialAnnotation();
        util_1.each(initialStatistic, function (a) {
            view.annotation()[a.type](a);
        });
        view.render(true);
    };
    return StatisticAction;
}(g2_1.Action));
exports.StatisticAction = StatisticAction;
//# sourceMappingURL=pie-statistic-action.js.map