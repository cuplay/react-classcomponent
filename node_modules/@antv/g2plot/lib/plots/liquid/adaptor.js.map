{"version":3,"file":"adaptor.js","sourceRoot":"","sources":["../../../src/plots/liquid/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Geometry } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { interaction, animation, theme, scale } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign, renderStatistic } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { LiquidOptions } from './types';\nimport { getLiquidData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<LiquidOptions>): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { percent, color, liquidStyle, radius, outline, wave } = options;\n\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1,\n    },\n  });\n\n  chart.data(getLiquidData(percent));\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  redius 生成的\n      widthRatio: radius,\n      interval: {\n        color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge',\n      },\n    },\n  });\n  const { ext } = interval(p);\n  const geometry = ext.geometry as Geometry;\n\n  // 将 radius 传入到自定义 shape 中\n  geometry.customInfo({\n    radius,\n    outline,\n    wave,\n  });\n\n  // 关闭组件\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n\n  return params;\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nexport function statistic(params: Params<LiquidOptions>, updated?: boolean): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { statistic, percent, meta } = options;\n\n  // 先清空标注，再重新渲染\n  chart.getController('annotation').clear(true);\n  if (statistic.content && !statistic.content.formatter) {\n    const metaFormatter = get(meta, ['percent', 'formatter']);\n    // @ts-ignore\n    statistic.content.formatter = ({ percent }) =>\n      metaFormatter ? metaFormatter(percent) : `${(percent * 100).toFixed(2)}%`;\n  }\n\n  renderStatistic(chart, { statistic, plotType: 'liquid' }, { percent });\n\n  if (updated) {\n    chart.render(true);\n  }\n\n  return params;\n}\n\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<LiquidOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, statistic, scale({}), animation, theme, interaction)(params);\n}\n"]}