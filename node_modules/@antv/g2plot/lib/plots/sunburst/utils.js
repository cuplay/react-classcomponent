"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTooltipTemplate = exports.transformData = void 0;
var tslib_1 = require("tslib");
var partition_1 = require("../../utils/hierarchy/partition");
var treemap_1 = require("../../utils/hierarchy/treemap");
/**
 * sunburst 处理数据
 * @param options
 */
function transformData(options) {
    var data = options.data, type = options.type, seriesField = options.seriesField, colorField = options.colorField, hierarchyConfig = options.hierarchyConfig;
    var transform = {
        partition: partition_1.partition,
        treemap: treemap_1.treemap,
    };
    var nodes = transform[type](data, tslib_1.__assign(tslib_1.__assign({}, hierarchyConfig), { 
        // @ts-ignore
        type: "hierarchy." + type, field: seriesField, as: ['x', 'y'] }));
    var result = [];
    nodes.forEach(function (node) {
        var _a;
        var _b, _c, _d, _e;
        if (node.depth === 0) {
            return null;
        }
        var nodeInfo = tslib_1.__assign((_a = {}, _a[seriesField] = node.data[seriesField] || ((_c = (_b = node.parent) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c[seriesField]), _a[colorField] = node.data[colorField] || ((_e = (_d = node.parent) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e[colorField]), _a), node);
        nodeInfo.ext = hierarchyConfig;
        result.push(nodeInfo);
    });
    return result;
}
exports.transformData = transformData;
/**
 * customContent
 * @param {string} value
 * @param {any[]} items
 * @param {Function} formatter
 * @param {string} field
 * @returns HTMLElement
 */
function getTooltipTemplate(params) {
    var items = params.items, formatter = params.formatter, fields = params.fields;
    var _a = items[0] || {}, color = _a.color, mappingData = _a.mappingData, data = _a.data; // 不会有分组情况
    var container = document.createElement('ul');
    container.className = 'g2-tooltip';
    var listItem = '';
    var formatterItem = function (item, field) {
        var _a;
        if (formatter) {
            return formatter(tslib_1.__assign(tslib_1.__assign({}, item), { field: field }));
        }
        return { name: field, value: (item === null || item === void 0 ? void 0 : item[field]) || ((_a = item === null || item === void 0 ? void 0 : item.data) === null || _a === void 0 ? void 0 : _a[field]) };
    };
    fields.forEach(function (field) {
        var _a = formatterItem(data, field), name = _a.name, value = _a.value;
        listItem += "<li class=\"g2-tooltip-list-item\" data-index={index} style=\"margin-bottom:4px;display:flex;align-items: center;\">\n        <span style=\"background-color:" + ((mappingData === null || mappingData === void 0 ? void 0 : mappingData.color) || color) + ";\" class=\"g2-tooltip-marker\"></span>\n        <span style=\"display:inline-flex;flex:1;justify-content:space-between\">\n        <span style=\"margin-right: 16px;\">" + name + ":</span>\n        <span class=\"g2-tooltip-list-item-value\">" + value + "</span>\n        </span>\n    </li>";
    });
    container.innerHTML = listItem;
    return container;
}
exports.getTooltipTemplate = getTooltipTemplate;
//# sourceMappingURL=utils.js.map