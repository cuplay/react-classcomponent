"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = exports.tooltip = exports.legend = exports.axis = void 0;
var tslib_1 = require("tslib");
var geometries_1 = require("../../adaptor/geometries");
var common_1 = require("../../adaptor/common");
var utils_1 = require("../../utils");
var utils_2 = require("./utils");
/**
 * geometry 配置处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var color = options.color, colorField = options.colorField, sunburstStyle = options.sunburstStyle;
    var data = utils_2.transformData(options);
    chart.data(data);
    // geometry
    geometries_1.polygon(utils_1.deepAssign({}, params, {
        options: {
            xField: 'x',
            yField: 'y',
            seriesField: colorField,
            polygon: {
                color: color,
                style: sunburstStyle,
            },
        },
    }));
    return params;
}
/**
 * axis 配置
 * @param params
 */
function axis(params) {
    var chart = params.chart;
    chart.axis(false);
    return params;
}
exports.axis = axis;
/**
 * legend 配置
 * @param params
 */
function legend(params) {
    var chart = params.chart;
    chart.legend(false);
    return params;
}
exports.legend = legend;
/**
 * 数据标签
 * @param params
 */
function label(params) {
    var chart = params.chart, options = params.options;
    var label = options.label, seriesField = options.seriesField;
    var geometry = utils_1.findGeometry(chart, 'polygon');
    // label 为 false, 空 则不显示 label
    if (!label) {
        geometry.label(false);
    }
    else {
        var callback = label.callback, cfg = tslib_1.__rest(label, ["callback"]);
        geometry.label({
            fields: [seriesField],
            callback: callback,
            cfg: utils_1.transformLabel(cfg),
        });
    }
    return params;
}
/**
 * coord 配置
 * @param params
 */
function coordinate(params) {
    var chart = params.chart, options = params.options;
    var innerRadius = options.innerRadius, radius = options.radius, reflect = options.reflect;
    var coord = chart.coordinate({
        type: 'polar',
        cfg: {
            innerRadius: innerRadius,
            radius: radius,
        },
    });
    if (reflect) {
        coord.reflect(reflect);
    }
    return params;
}
/**
 * scale 配置
 * @param params
 */
function scale(params) {
    var chart = params.chart, options = params.options;
    var meta = options.meta;
    if (meta) {
        // @ts-ignore
        chart.scale(meta);
    }
    return params;
}
/**
 * tooltip 配置
 * @param params
 */
function tooltip(params) {
    var chart = params.chart, options = params.options;
    var tooltip = options.tooltip, seriesField = options.seriesField, colorField = options.colorField;
    if (tooltip) {
        chart.tooltip(tslib_1.__assign(tslib_1.__assign({}, tooltip), { customContent: tooltip && tooltip.customContent
                ? tooltip.customContent
                : function (value, items) {
                    return utils_2.getTooltipTemplate({
                        value: value,
                        items: items,
                        formatter: tooltip && (tooltip === null || tooltip === void 0 ? void 0 : tooltip.formatter),
                        fields: (tooltip && tooltip.fields) || [seriesField, colorField],
                    });
                } }));
    }
    return params;
}
exports.tooltip = tooltip;
/**
 * 旭日图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return utils_1.flow(geometry, common_1.theme, axis, scale, legend, coordinate, tooltip, label, common_1.interaction, common_1.animation, common_1.annotation())(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map