"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = void 0;
var common_1 = require("../../adaptor/common");
var utils_1 = require("../../utils");
var sankey_1 = require("../../utils/transform/sankey");
var geometries_1 = require("../../adaptor/geometries");
var data_1 = require("../../utils/data");
var constant_1 = require("./constant");
var circle_1 = require("./circle");
var helper_1 = require("./helper");
/**
 * geometry 处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var data = options.data, sourceField = options.sourceField, targetField = options.targetField, weightField = options.weightField, color = options.color, nodeStyle = options.nodeStyle, edgeStyle = options.edgeStyle, label = options.label, tooltip = options.tooltip, nodeAlign = options.nodeAlign, nodePaddingRatio = options.nodePaddingRatio, nodePadding = options.nodePadding, nodeWidthRatio = options.nodeWidthRatio, nodeWidth = options.nodeWidth, nodeSort = options.nodeSort;
    // 1. 组件，优先设置，因为子 view 会继承配置
    chart.legend(false);
    chart.tooltip(tooltip);
    chart.axis(false);
    // 2. 转换出 layout 前数据
    var sankeyLayoutInputData = data_1.transformDataToNodeLinkData(circle_1.cutoffCircle(data, sourceField, targetField), sourceField, targetField, weightField);
    // 3. layout 之后的数据
    var _a = sankey_1.sankeyLayout({
        nodeAlign: nodeAlign,
        // @ts-ignore
        nodePadding: helper_1.getNodePaddingRatio(nodePadding, nodePaddingRatio, chart.height),
        // @ts-ignore
        nodeWidth: helper_1.getNodeWidthRatio(nodeWidth, nodeWidthRatio, chart.width),
        nodeSort: nodeSort,
    }, sankeyLayoutInputData), nodes = _a.nodes, links = _a.links;
    // 4. 生成绘图数据
    var nodesData = nodes.map(function (node) {
        return {
            x: node.x,
            y: node.y,
            name: node.name,
            isNode: true,
        };
    });
    var edgesData = links.map(function (link) {
        return {
            source: link.source.name,
            target: link.target.name,
            name: link.source.name || link.target.name,
            x: link.x,
            y: link.y,
            value: link.value,
            isNode: false,
        };
    });
    // 5. node edge views
    // edge view
    var edgeView = chart.createView();
    edgeView.data(edgesData);
    geometries_1.edge({
        chart: edgeView,
        // @ts-ignore
        options: {
            xField: constant_1.X_FIELD,
            yField: constant_1.Y_FIELD,
            seriesField: constant_1.COLOR_FIELD,
            edge: {
                color: color,
                style: edgeStyle,
                shape: 'arc',
            },
            tooltip: tooltip,
            state: {
                active: {
                    style: {
                        opacity: 0.8,
                        lineWidth: 0,
                    },
                },
            },
        },
    });
    var nodeView = chart.createView();
    nodeView.data(nodesData);
    geometries_1.polygon({
        chart: nodeView,
        options: {
            xField: constant_1.X_FIELD,
            yField: constant_1.Y_FIELD,
            seriesField: constant_1.COLOR_FIELD,
            polygon: {
                color: color,
                style: nodeStyle,
            },
            label: label,
            tooltip: tooltip,
        },
    });
    chart.interaction('element-active');
    // scale
    chart.scale({
        x: { sync: true, nice: true },
        y: { sync: true, nice: true },
        name: { sync: 'color' },
    });
    return params;
}
/**
 * 图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return utils_1.flow(geometry, common_1.interaction, common_1.animation, common_1.theme
    // ... 其他的 adaptor flow
    )(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map