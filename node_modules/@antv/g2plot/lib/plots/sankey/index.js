"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sankey = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var plot_1 = require("../../core/plot");
var adaptor_1 = require("./adaptor");
/**
 *  桑基图 Sankey
 */
var Sankey = /** @class */ (function (_super) {
    tslib_1.__extends(Sankey, _super);
    function Sankey() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** 图表类型 */
        _this.type = 'sankey';
        return _this;
    }
    Sankey.prototype.getDefaultOptions = function () {
        return {
            appendPadding: 8,
            syncViewPadding: true,
            nodeStyle: {
                opacity: 1,
                fillOpacity: 1,
                lineWidth: 1,
            },
            edgeStyle: {
                opacity: 0.3,
                lineWidth: 0,
            },
            label: {
                fields: ['x', 'name'],
                callback: function (x, name) {
                    var isLast = x[1] === 1; // 最后一列靠边的节点
                    return {
                        style: {
                            fill: '#545454',
                            textAlign: isLast ? 'end' : 'start',
                        },
                        offsetX: isLast ? -8 : 8,
                        content: name,
                    };
                },
                layout: [
                    {
                        type: 'hide-overlap',
                    },
                ],
            },
            tooltip: {
                showTitle: false,
                showMarkers: false,
                shared: false,
                fields: ['name', 'source', 'target', 'value', 'isNode'],
                // 内置：node 不显示 tooltip，edge 显示 tooltip
                showContent: function (items) {
                    return !util_1.get(items, [0, 'data', 'isNode']);
                },
                formatter: function (datum) {
                    var source = datum.source, target = datum.target, value = datum.value;
                    return {
                        name: source + ' -> ' + target,
                        value: value,
                    };
                },
            },
            nodeWidthRatio: 0.008,
            nodePaddingRatio: 0.01,
        };
    };
    /**
     * 获取适配器
     */
    Sankey.prototype.getSchemaAdaptor = function () {
        return adaptor_1.adaptor;
    };
    return Sankey;
}(plot_1.Plot));
exports.Sankey = Sankey;
//# sourceMappingURL=index.js.map