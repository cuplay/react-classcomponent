"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var utils_1 = require("../../utils");
var utils_2 = require("../../utils");
var constant_1 = require("../../constant");
var common_1 = require("../../adaptor/common");
/**
 * 数据字段映射
 * @param params
 */
function field(params) {
    var chart = params.chart, options = params.options;
    var data = options.data, type = options.type, reflect = options.reflect, xField = options.xField, yField = options.yField, colorField = options.colorField, sizeField = options.sizeField, sizeRatio = options.sizeRatio, shape = options.shape, color = options.color;
    chart.data(data);
    var geometry;
    if (type === 'density') {
        geometry = chart.heatmap().position(xField + "*" + yField);
    }
    else {
        geometry = chart.polygon().position(xField + "*" + yField);
    }
    if (colorField) {
        geometry.color(colorField, color || constant_1.DEFAULT_COLORS.GRADIENT.CONTINUOUS);
    }
    if (reflect) {
        chart.coordinate().reflect(reflect);
    }
    /**
     * The ratio between the actual size and the max available size, must be in range `[0,1]`.
     *
     * If the `sizeRatio` attribute is undefined or it exceeds the range,
     * `checkedSizeRatio` would be set to 1 as default.
     */
    var checkedSizeRatio = 1;
    if (sizeRatio || sizeRatio === 0) {
        if (!shape && !sizeField) {
            console.warn('sizeRatio is not in effect: Must define shape or sizeField first');
        }
        else if (sizeRatio < 0 || sizeRatio > 1) {
            console.warn('sizeRatio is not in effect: It must be a number in [0,1]');
        }
        else {
            checkedSizeRatio = sizeRatio;
        }
    }
    // when it has to change shape from original rect
    if (shape) {
        // just to change shape in cell
        if (!sizeField) {
            geometry.shape('', function () {
                return [shape, 1, checkedSizeRatio];
            });
        }
        // specific shape in different size
        if (sizeField) {
            var field_1 = data.map(function (row) { return row[sizeField]; });
            var min_1 = Math.min.apply(Math, field_1);
            var max_1 = Math.max.apply(Math, field_1);
            geometry.shape(sizeField, function (v) {
                return [shape, (v - min_1) / (max_1 - min_1), checkedSizeRatio];
            });
        }
    }
    return params;
}
/**
 * meta 配置
 * @param params
 */
function meta(params) {
    var _a;
    var options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField, yField = options.yField;
    return utils_2.flow(common_1.scale((_a = {},
        _a[xField] = xAxis,
        _a[yField] = yAxis,
        _a)))(params);
}
/**
 * axis 配置
 * @param params
 */
function axis(params) {
    var chart = params.chart, options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField, yField = options.yField;
    // 为 false 则是不显示轴
    if (xAxis === false) {
        chart.axis(xField, false);
    }
    else {
        chart.axis(xField, xAxis);
    }
    if (yAxis === false) {
        chart.axis(yField, false);
    }
    else {
        chart.axis(yField, yAxis);
    }
    return params;
}
/**
 * legend 配置
 * @param params
 */
function legend(params) {
    var chart = params.chart, options = params.options;
    var legend = options.legend, colorField = options.colorField;
    if (legend) {
        chart.legend(colorField, legend);
    }
    else {
        chart.legend(false);
    }
    return params;
}
/**
 * 样式
 * @param params
 */
function style(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField, colorField = options.colorField, sizeField = options.sizeField, heatmapStyle = options.heatmapStyle;
    var geometry = chart.geometries[0];
    if (heatmapStyle && geometry) {
        if (util_1.isFunction(heatmapStyle)) {
            geometry.style(xField + "*" + yField + "*" + colorField + "*" + sizeField, heatmapStyle);
        }
        else if (util_1.isObject(heatmapStyle)) {
            geometry.style(heatmapStyle);
        }
    }
    return params;
}
/**
 * 数据标签
 * @param params
 */
function label(params) {
    var chart = params.chart, options = params.options;
    var label = options.label, colorField = options.colorField, type = options.type;
    var geometry = utils_1.findGeometry(chart, type === 'density' ? 'heatmap' : 'polygon');
    if (!label) {
        geometry.label(false);
    }
    else if (colorField) {
        var callback = label.callback, cfg = tslib_1.__rest(label, ["callback"]);
        geometry.label({
            fields: [colorField],
            callback: callback,
            cfg: utils_2.transformLabel(cfg),
        });
    }
    return params;
}
/**
 * 热力图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return utils_2.flow(field, meta, common_1.theme, axis, legend, common_1.tooltip, style, label, common_1.annotation(), common_1.interaction, common_1.animation, common_1.state)(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map