{"version":3,"file":"get-path-points.js","sourceRoot":"","sources":["../../../../src/geometry/shape/util/get-path-points.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAGrC,SAAS,YAAY,CAAC,KAAK;IACzB,IAAI,KAAK,EAAE;QACT,OAAO,KAAK,CAAC;KACd;IACD,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;AAC/D,CAAC;AAED,SAAS,MAAM,CAAC,KAA2B;IACzC,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;QAClB,wDAAwD;QACxD,OAAO,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACjC;IACD,IAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;IACtB,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AACvE,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,MAAM,UAAU,aAAa,CAAC,MAAqB,EAAE,YAA6B,EAAE,eAA+B;IAA9D,6BAAA,EAAA,oBAA6B;IAAE,gCAAA,EAAA,sBAA+B;IACjH,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;QAC/D,kBAAkB;QAClB,OAAO,EAAE,CAAC;KACX;IAED,IAAI,YAAY,EAAE;QAChB,aAAa;QACb,IAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YACjD,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;gBAClB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACtB;SACF;QACD,OAAO,CAAC,QAAQ,CAAC,CAAC;KACnB;IAED,IAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QACjD,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;YACjB,IAAI,GAAG,CAAC,MAAM,EAAE;gBACd,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;oBAC3C,2BAA2B;oBAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAClB;gBACD,GAAG,GAAG,EAAE,CAAC;aACV;SACF;aAAM;YACL,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACjB;KACF;IAED,IAAI,GAAG,CAAC,MAAM,EAAE;QACd,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAClB;IACD,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { isArray } from '@antv/util';\nimport { Point, RangePoint, ShapeVertices } from '../../../interface';\n\nfunction isValueEmpty(value) {\n  if (value) {\n    return false;\n  }\n  return value === null || value === undefined || isNaN(value);\n}\n\nfunction isYNil(point: Point[] | RangePoint) {\n  if (isArray(point)) {\n    // 特殊处理 area 的关键点数据，其关键点结构为 [{x: 0, y: 1}, {x: 0, y: 2}]\n    return isValueEmpty(point[1].y);\n  }\n  const value = point.y;\n  return isArray(value) ? isValueEmpty(value[0]) : isValueEmpty(value);\n}\n\n/**\n * @ignore\n * 分割数据，用于处理在一组点数据中，y 对应的数值存在 null/undefined/NaN 的情况\n * 应用于折线图、区域图以及路径图\n *\n * ```typescript\n * // return [[{x: 1, y: 2}, {x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], true);\n * // return [[{x: 1, y: 2}], [{x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], false);\n * // return [[[{ x: 1, y: 10 }, { x: 2, y: 2 }], [{ x: 9, y: 34 }, { x: 1, y: 1 }]]]\n * getPathPoints([\n *   [{ x: 1, y: 10 }, { x: 2, y: 2 }],\n *   [{ x: 4, y: 2 }, { x: 8, y: NaN }],\n *   [{ x: 9, y: 34 }, { x: 1, y: 1 }],\n * ], true);\n * ```\n *\n * @param points 要进行处理点集合\n * @param connectNulls 是否连接空值数据\n * @param showSinglePoint 是否展示孤立点\n * @returns 返回处理后的点集合\n */\nexport function getPathPoints(points: ShapeVertices, connectNulls: boolean = false, showSinglePoint: boolean = true) {\n  if (!points.length || (points.length === 1 && !showSinglePoint)) {\n    // 空或者只有一个点并配置不展示时\n    return [];\n  }\n\n  if (connectNulls) {\n    // 即 y 值为空的场景\n    const filtered = [];\n    for (let i = 0, len = points.length; i < len; i++) {\n      const point = points[i];\n      if (!isYNil(point)) {\n        filtered.push(point);\n      }\n    }\n    return [filtered];\n  }\n\n  const result = [];\n  let tmp = [];\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (isYNil(point)) {\n      if (tmp.length) {\n        if (!(tmp.length === 1 && !showSinglePoint)) {\n          // 如果前段数据只有一个字段并且不需要展示时则不加入\n          result.push(tmp);\n        }\n        tmp = [];\n      }\n    } else {\n      tmp.push(point);\n    }\n  }\n\n  if (tmp.length) {\n    result.push(tmp);\n  }\n  return result;\n}\n"]}