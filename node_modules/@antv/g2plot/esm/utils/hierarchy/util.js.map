{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../src/utils/hierarchy/util.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAE/C,IAAM,qBAAqB,GAAG,qCAAqC,CAAC;AAOpE,MAAM,UAAU,QAAQ,CAAC,OAAgB,EAAE,YAAqB;IACtD,IAAA,KAAK,GAAa,OAAO,MAApB,EAAE,MAAM,GAAK,OAAO,OAAZ,CAAa;IAClC,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO,KAAK,CAAC;KACd;IACD,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;QAClB,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACpC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;KACjB;IACD,OAAO,CAAC,IAAI,CAAI,qBAAqB,qCAAkC,CAAC,CAAC;IACzE,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;QACpB,OAAO,MAAM,CAAC;KACf;IACD,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,EAAE;QACpC,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;KAClB;IACD,IAAI,YAAY,EAAE;QAChB,OAAO,YAAY,CAAC;KACrB;IACD,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,IAAS;IACnC,IAAM,KAAK,GAAU,EAAE,CAAC;IACxB,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;QACrB,eAAe;QACf,IAAI,CAAC,IAAI,CAAC,UAAC,IAAS;YAClB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;KACJ;SAAM,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;QAChC,kBAAkB;QAClB,IAAI,CAAC,QAAQ,CAAC,UAAC,IAAS;YACtB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { isArray, isString } from '@antv/util';\n\nconst INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\n\ninterface Options {\n  field?: string | string[];\n  fields?: string | string[];\n}\n\nexport function getField(options: Options, defaultField?: string): string {\n  const { field, fields } = options;\n  if (isString(field)) {\n    return field;\n  }\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n  console.warn(`${INVALID_FIELD_ERR_MSG} will try to get fields instead.`);\n  if (isString(fields)) {\n    return fields;\n  }\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n  if (defaultField) {\n    return defaultField;\n  }\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\n\nexport function getAllNodes(root: any) {\n  const nodes: any[] = [];\n  if (root && root.each) {\n    // d3-hierarchy\n    root.each((node: any) => {\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode((node: any) => {\n      nodes.push(node);\n    });\n  }\n  return nodes;\n}\n"]}