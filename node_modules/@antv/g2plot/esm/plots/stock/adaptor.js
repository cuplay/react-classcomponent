import { isObject } from '@antv/util';
import { interaction, animation, theme } from '../../adaptor/common';
import { findGeometry, flow, pick, deepAssign } from '../../utils';
import { AXIS_META_CONFIG_KEYS } from '../../constant';
import { Y_FIELD, TREND_FIELD, TREND_UP, TREND_DOWN, TREND_COLOR } from './constant';
import { getStockData } from './utils';
/**
 * 图表配置处理
 * @param params
 */
function field(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField;
    var data = options.data;
    chart.data(getStockData(data, yField));
    var geometry = chart.schema().position(xField + "*" + Y_FIELD).shape('candle');
    geometry.color(TREND_FIELD, TREND_COLOR);
    return params;
}
/**
 * meta 配置
 * @param params
 */
export function meta(params) {
    var _a, _b;
    var chart = params.chart, options = params.options;
    var meta = options.meta, xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField;
    var baseMeta = (_a = {},
        _a[xField] = {
            type: 'timeCat',
            tickCount: 6,
        },
        _a[TREND_FIELD] = {
            values: [TREND_UP, TREND_DOWN],
        },
        _a);
    var scales = deepAssign(baseMeta, meta, (_b = {},
        _b[xField] = pick(xAxis, AXIS_META_CONFIG_KEYS),
        _b[Y_FIELD] = pick(yAxis, AXIS_META_CONFIG_KEYS),
        _b));
    chart.scale(scales);
    return params;
}
/**
 * axis 配置
 * @param params
 */
export function axis(params) {
    var chart = params.chart, options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField;
    // 为 false 则是不显示轴
    if (xAxis === false) {
        chart.axis(xField, false);
    }
    else {
        chart.axis(xField, xAxis);
    }
    if (yAxis === false) {
        chart.axis(Y_FIELD, false);
    }
    else {
        chart.axis(Y_FIELD, yAxis);
    }
    return params;
}
/**
 * tooltip 配置
 * @param params
 */
export function tooltip(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField, _a = options.meta, meta = _a === void 0 ? {} : _a, _b = options.tooltip, tooltip = _b === void 0 ? {} : _b;
    var geometry = findGeometry(chart, 'schema');
    var open = yField[0], close = yField[1], high = yField[2], low = yField[3];
    var openAlias = meta[open] ? meta[open].alias || open : open;
    var closeAlias = meta[close] ? meta[close].alias || open : close;
    var highAlias = meta[high] ? meta[high].alias || high : high;
    var lowAlias = meta[low] ? meta[low].alias || low : low;
    // geom级别tooltip
    var baseGeomTooltipOptions = {
        fields: [xField, open, close, high, low],
        callback: function (xFieldVal, openVal, closeVal, highVal, lowVal) {
            var tpl = {
                name: xFieldVal,
                value: "\n          <br><span data-label=\"" + openAlias + "\" style=\"padding-left: 16px\">" + openAlias + "\uFF1A" + openVal + "</span>\n          <br><span data-label=\"" + closeAlias + "\" style=\"padding-left: 16px\">" + closeAlias + "\uFF1A" + closeVal + "</span>\n          <br><span data-label=\"" + highAlias + "\" style=\"padding-left: 16px\">" + highAlias + "\uFF1A" + highVal + "</span>\n          <br><span data-label=\"" + lowAlias + "\" style=\"padding-left: 16px\">" + lowAlias + "\uFF1A" + lowVal + "</span>\n        ",
            };
            return tpl;
        },
    };
    // chart级别tooltip， text格式化显示内容
    var baseTooltipOptions = {
        crosshairs: {
            text: function (type, defaultContent, items) {
                var tooltipCrosshairsText = { position: 'end' };
                if (type === 'x') {
                    var item = items[0];
                    tooltipCrosshairsText['content'] = item ? item.data[xField] : defaultContent;
                }
                else {
                    tooltipCrosshairsText['content'] = defaultContent;
                }
                return tooltipCrosshairsText;
            },
        },
    };
    if (tooltip) {
        if (isObject(tooltip)) {
            var chartTooltip = deepAssign({}, baseTooltipOptions, tooltip);
            chart.tooltip(chartTooltip);
            geometry.tooltip(baseGeomTooltipOptions);
        }
    }
    else {
        chart.tooltip(false);
    }
    return params;
}
/**
 * legend 配置
 * @param params
 */
export function legend(params) {
    var chart = params.chart, options = params.options;
    var legend = options.legend;
    if (legend) {
        chart.legend(TREND_FIELD, legend);
    }
    else if (legend === false) {
        chart.legend(false);
    }
    return params;
}
/**
 * K线图适配器
 * @param chart
 * @param options
 */
export function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    flow(field, meta, theme, axis, tooltip, legend, interaction, animation)(params);
}
//# sourceMappingURL=adaptor.js.map