import { __assign, __rest } from "tslib";
import { polygon as polygonAdaptor } from '../../adaptor/geometries';
import { interaction, animation, theme, annotation } from '../../adaptor/common';
import { flow, findGeometry, transformLabel, deepAssign } from '../../utils';
import { transformData, getTooltipTemplate } from './utils';
/**
 * geometry 配置处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var color = options.color, colorField = options.colorField, sunburstStyle = options.sunburstStyle;
    var data = transformData(options);
    chart.data(data);
    // geometry
    polygonAdaptor(deepAssign({}, params, {
        options: {
            xField: 'x',
            yField: 'y',
            seriesField: colorField,
            polygon: {
                color: color,
                style: sunburstStyle,
            },
        },
    }));
    return params;
}
/**
 * axis 配置
 * @param params
 */
export function axis(params) {
    var chart = params.chart;
    chart.axis(false);
    return params;
}
/**
 * legend 配置
 * @param params
 */
export function legend(params) {
    var chart = params.chart;
    chart.legend(false);
    return params;
}
/**
 * 数据标签
 * @param params
 */
function label(params) {
    var chart = params.chart, options = params.options;
    var label = options.label, seriesField = options.seriesField;
    var geometry = findGeometry(chart, 'polygon');
    // label 为 false, 空 则不显示 label
    if (!label) {
        geometry.label(false);
    }
    else {
        var callback = label.callback, cfg = __rest(label, ["callback"]);
        geometry.label({
            fields: [seriesField],
            callback: callback,
            cfg: transformLabel(cfg),
        });
    }
    return params;
}
/**
 * coord 配置
 * @param params
 */
function coordinate(params) {
    var chart = params.chart, options = params.options;
    var innerRadius = options.innerRadius, radius = options.radius, reflect = options.reflect;
    var coord = chart.coordinate({
        type: 'polar',
        cfg: {
            innerRadius: innerRadius,
            radius: radius,
        },
    });
    if (reflect) {
        coord.reflect(reflect);
    }
    return params;
}
/**
 * scale 配置
 * @param params
 */
function scale(params) {
    var chart = params.chart, options = params.options;
    var meta = options.meta;
    if (meta) {
        // @ts-ignore
        chart.scale(meta);
    }
    return params;
}
/**
 * tooltip 配置
 * @param params
 */
export function tooltip(params) {
    var chart = params.chart, options = params.options;
    var tooltip = options.tooltip, seriesField = options.seriesField, colorField = options.colorField;
    if (tooltip) {
        chart.tooltip(__assign(__assign({}, tooltip), { customContent: tooltip && tooltip.customContent
                ? tooltip.customContent
                : function (value, items) {
                    return getTooltipTemplate({
                        value: value,
                        items: items,
                        formatter: tooltip && (tooltip === null || tooltip === void 0 ? void 0 : tooltip.formatter),
                        fields: (tooltip && tooltip.fields) || [seriesField, colorField],
                    });
                } }));
    }
    return params;
}
/**
 * 旭日图适配器
 * @param chart
 * @param options
 */
export function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return flow(geometry, theme, axis, scale, legend, coordinate, tooltip, label, interaction, animation, annotation())(params);
}
//# sourceMappingURL=adaptor.js.map