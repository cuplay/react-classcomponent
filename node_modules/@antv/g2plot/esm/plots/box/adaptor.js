import { isFunction, isObject } from '@antv/util';
import { interaction, animation, theme } from '../../adaptor/common';
import { findGeometry } from '../../utils';
import { flow, pick, deepAssign } from '../../utils';
import { AXIS_META_CONFIG_KEYS } from '../../constant';
import { BOX_RANGE, BOX_SYNC_NAME, OUTLIERS_VIEW_ID } from './constant';
import { transformData } from './utils';
/**
 * 字段
 * @param params
 */
function field(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField, groupField = options.groupField, color = options.color;
    var yFieldName = Array.isArray(yField) ? BOX_RANGE : yField;
    var geometry = chart.schema().position(xField + "*" + yFieldName).shape('box');
    // set group field as color channel
    if (groupField) {
        geometry.color(groupField, color).adjust('dodge');
    }
    chart.data(transformData(options.data, yField));
    return params;
}
function outliersPoint(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, data = options.data, outliersField = options.outliersField, outliersStyle = options.outliersStyle, padding = options.padding;
    if (!outliersField)
        return params;
    var outliersView = chart.createView({ padding: padding, id: OUTLIERS_VIEW_ID });
    outliersView.data(data);
    outliersView.axis(false);
    var geometry = outliersView.point().position(xField + "*" + outliersField).shape('circle');
    /**
     * style 的几种情况
     * g.style({ fill: 'red' });
     * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));
     */
    if (isFunction(outliersStyle)) {
        geometry.style(xField + "*" + outliersField, function (_x, _outliers) {
            var _a;
            return outliersStyle((_a = {},
                _a[xField] = _x,
                _a[outliersField] = _outliers,
                _a));
        });
    }
    else if (isObject(outliersStyle)) {
        geometry.style(outliersStyle);
    }
    return params;
}
/**
 * meta 配置
 * @param params
 */
function meta(params) {
    var _a, _b;
    var chart = params.chart, options = params.options;
    var meta = options.meta, xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField, yField = options.yField, outliersField = options.outliersField;
    var yFieldName = Array.isArray(yField) ? BOX_RANGE : yField;
    var baseMeta = {};
    // make yField and outliersField share y mate
    if (outliersField) {
        var syncName = BOX_SYNC_NAME;
        baseMeta = (_a = {},
            _a[outliersField] = { sync: syncName, nice: true },
            _a[yFieldName] = { sync: syncName, nice: true },
            _a);
    }
    var scales = deepAssign(baseMeta, meta, (_b = {},
        _b[xField] = pick(xAxis, AXIS_META_CONFIG_KEYS),
        _b[yFieldName] = pick(yAxis, AXIS_META_CONFIG_KEYS),
        _b));
    chart.scale(scales);
    return params;
}
/**
 * axis 配置
 * @param params
 */
function axis(params) {
    var chart = params.chart, options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField, yField = options.yField;
    var yFieldName = Array.isArray(yField) ? BOX_RANGE : yField;
    // 为 false 则是不显示轴
    if (xAxis === false) {
        chart.axis(xField, false);
    }
    else {
        chart.axis(xField, xAxis);
    }
    if (yAxis === false) {
        chart.axis(BOX_RANGE, false);
    }
    else {
        chart.axis(yFieldName, yAxis);
    }
    return params;
}
/**
 * legend 配置
 * @param params
 */
export function legend(params) {
    var chart = params.chart, options = params.options;
    var legend = options.legend, groupField = options.groupField;
    if (groupField) {
        if (legend) {
            chart.legend(groupField, legend);
        }
        else {
            // Grouped Box Chart default has legend, and it's position is `bottom`
            chart.legend(groupField, { position: 'bottom' });
        }
    }
    else {
        chart.legend(false);
    }
    return params;
}
/**
 * 样式
 * @param params
 */
function style(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField, boxStyle = options.boxStyle;
    var geometry = findGeometry(chart, 'schema');
    var yFieldName = Array.isArray(yField) ? BOX_RANGE : yField;
    /**
     * style 的几种情况
     * g.style({ fill: 'red' });
     * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));
     */
    if (isFunction(boxStyle)) {
        geometry.style(xField + "*" + yFieldName, function (_x, _y) {
            var _a;
            return boxStyle((_a = {},
                _a[xField] = _x,
                _a[yFieldName] = _y,
                _a));
        });
    }
    else if (isObject(boxStyle)) {
        geometry.style(boxStyle);
    }
    return params;
}
/**
 * tooltip 配置
 * @param params
 */
export function tooltip(params) {
    var chart = params.chart, options = params.options;
    var tooltip = options.tooltip;
    if (tooltip !== undefined) {
        chart.tooltip(tooltip);
    }
    return params;
}
/**
 * 箱型图适配器
 * @param params
 */
export function adaptor(params) {
    return flow(field, outliersPoint, meta, axis, style, legend, tooltip, interaction, animation, theme)(params);
}
//# sourceMappingURL=adaptor.js.map