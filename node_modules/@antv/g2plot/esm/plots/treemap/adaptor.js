import { polygon as basePolygon } from '../../adaptor/geometries/polygon';
import { interaction as commonInteraction, animation, theme, legend, annotation, tooltip } from '../../adaptor/common';
import { flow, deepAssign } from '../../utils';
import { transformData, isDrillDown, getFommatInteractions } from './utils';
/**
 * 获取默认 option
 * @param params
 */
function defaultOptions(params) {
    var options = params.options;
    var colorField = options.colorField;
    return deepAssign({
        options: {
            // 默认按照 name 字段对颜色进行分类
            colorField: 'name',
            rectStyle: {
                lineWidth: 1,
                stroke: '#fff',
            },
            hierarchyConfig: {
                tile: 'treemapResquarify',
            },
            label: {
                fields: ['name'],
                layout: {
                    type: 'limit-in-shape',
                },
            },
            tooltip: {
                showMarkers: false,
                showTitle: false,
                fields: ['name', 'value', colorField],
                formatter: function (data) {
                    return {
                        name: data.name,
                        value: data.value,
                    };
                },
            },
            interactions: [{ type: 'view-zoom' }, { type: 'treemap-element-zoom' }],
        },
    }, params);
}
/**
 * 字段
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var color = options.color, colorField = options.colorField, rectStyle = options.rectStyle;
    var data = transformData({
        data: options.data,
        colorField: options.colorField,
        openDrillDown: isDrillDown(options.interactions),
    });
    chart.data(data);
    // geometry
    basePolygon(deepAssign({}, params, {
        options: {
            xField: 'x',
            yField: 'y',
            seriesField: colorField,
            rawFields: ['value'],
            polygon: {
                color: color,
                style: rectStyle,
            },
        },
    }));
    // 做一个反转，这样配合排序，可以将最大值放到左上角，最小值放到右下角
    chart.coordinate().reflect('y');
    return params;
}
/**
 * 坐标轴
 * @param params
 */
function axis(params) {
    var chart = params.chart;
    chart.axis(false);
    return params;
}
/**
 * Interaction 配置
 * @param params
 */
export function interaction(params) {
    var chart = params.chart, options = params.options;
    var interactions = options.interactions, hierarchyConfig = options.hierarchyConfig;
    commonInteraction({
        chart: chart,
        options: {
            interactions: getFommatInteractions(interactions, hierarchyConfig),
        },
    });
    return params;
}
/**
 * 矩形树图
 * @param chart
 * @param options
 */
export function adaptor(params) {
    return flow(defaultOptions, geometry, axis, theme, legend, tooltip, interaction, animation, annotation())(params);
}
//# sourceMappingURL=adaptor.js.map