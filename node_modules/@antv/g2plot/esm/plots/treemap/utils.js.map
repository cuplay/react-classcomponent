{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/plots/treemap/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray } from '@antv/util';\nimport { treemap } from '../../utils/hierarchy/treemap';\nimport { deepAssign } from '../../utils';\nimport { TreemapOptions } from './types';\n\nexport function isDrillDown(interactions: TreemapOptions['interactions']) {\n  if (!isArray(interactions)) return false;\n  return interactions.findIndex((i) => i.type === 'treemap-drill-down') > -1;\n}\n\nexport function getFommatInteractions(\n  interactions: TreemapOptions['interactions'],\n  hierarchyConfig: TreemapOptions['hierarchyConfig']\n): TreemapOptions['interactions'] {\n  const openDrillDown = isDrillDown(interactions);\n  if (openDrillDown) {\n    return interactions.map((i) => {\n      if (i.type === 'treemap-drill-down') {\n        return deepAssign({}, i, {\n          cfg: {\n            hierarchyConfig,\n          },\n        });\n      }\n      return i;\n    });\n  }\n  return interactions;\n}\n\ninterface TransformDataOptions {\n  data: TreemapOptions['data'];\n  colorField: TreemapOptions['colorField'];\n  openDrillDown: boolean;\n  hierarchyConfig?: TreemapOptions['hierarchyConfig'];\n}\n\nexport function transformData(options: TransformDataOptions) {\n  const { data, colorField, openDrillDown, hierarchyConfig = {} } = options;\n\n  const nodes = treemap(data, {\n    ...hierarchyConfig,\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y'],\n  });\n\n  const result = [];\n  nodes.forEach((node) => {\n    if (node.depth === 0) {\n      return null;\n    }\n\n    // 开启下钻，仅加载 depth === 1 的数据\n    if (openDrillDown && node.depth !== 1) {\n      return null;\n    }\n\n    // 不开启下钻，加载所有叶子节点\n    if (!openDrillDown && node.children) {\n      return null;\n    }\n\n    const eachNode = Object.assign({}, node.data, {\n      x: node.x,\n      y: node.y,\n      depth: node.depth,\n      value: node.value,\n    });\n    if (!node.data[colorField] && node.parent) {\n      const ancestorNode = node.ancestors().find((n) => n.data[colorField]);\n      eachNode[colorField] = ancestorNode?.data[colorField];\n    } else {\n      eachNode[colorField] = node.data[colorField];\n    }\n\n    result.push(eachNode);\n  });\n  return result;\n}\n"]}