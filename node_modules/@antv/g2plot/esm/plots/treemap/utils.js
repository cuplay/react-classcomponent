import { __assign } from "tslib";
import { isArray } from '@antv/util';
import { treemap } from '../../utils/hierarchy/treemap';
import { deepAssign } from '../../utils';
export function isDrillDown(interactions) {
    if (!isArray(interactions))
        return false;
    return interactions.findIndex(function (i) { return i.type === 'treemap-drill-down'; }) > -1;
}
export function getFommatInteractions(interactions, hierarchyConfig) {
    var openDrillDown = isDrillDown(interactions);
    if (openDrillDown) {
        return interactions.map(function (i) {
            if (i.type === 'treemap-drill-down') {
                return deepAssign({}, i, {
                    cfg: {
                        hierarchyConfig: hierarchyConfig,
                    },
                });
            }
            return i;
        });
    }
    return interactions;
}
export function transformData(options) {
    var data = options.data, colorField = options.colorField, openDrillDown = options.openDrillDown, _a = options.hierarchyConfig, hierarchyConfig = _a === void 0 ? {} : _a;
    var nodes = treemap(data, __assign(__assign({}, hierarchyConfig), { 
        // @ts-ignore
        type: 'hierarchy.treemap', field: 'value', as: ['x', 'y'] }));
    var result = [];
    nodes.forEach(function (node) {
        if (node.depth === 0) {
            return null;
        }
        // 开启下钻，仅加载 depth === 1 的数据
        if (openDrillDown && node.depth !== 1) {
            return null;
        }
        // 不开启下钻，加载所有叶子节点
        if (!openDrillDown && node.children) {
            return null;
        }
        var eachNode = Object.assign({}, node.data, {
            x: node.x,
            y: node.y,
            depth: node.depth,
            value: node.value,
        });
        if (!node.data[colorField] && node.parent) {
            var ancestorNode = node.ancestors().find(function (n) { return n.data[colorField]; });
            eachNode[colorField] = ancestorNode === null || ancestorNode === void 0 ? void 0 : ancestorNode.data[colorField];
        }
        else {
            eachNode[colorField] = node.data[colorField];
        }
        result.push(eachNode);
    });
    return result;
}
//# sourceMappingURL=utils.js.map